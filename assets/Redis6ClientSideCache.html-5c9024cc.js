import{_ as n,W as s,X as a,$ as e,Z as t}from"./framework-9e67db09.js";const p={},c=t(`<p>在前面的文章中，我们介绍了Redis6.0中的新特性客户端缓存<code>client-side caching</code>，通过telnet连接模拟客户端，测试了三种客户端缓存的工作模式，这篇文章我们就来点硬核实战，看看客户端缓存在java项目中应该如何落地。</p><h2 id="铺垫" tabindex="-1"><a class="header-anchor" href="#铺垫" aria-hidden="true">#</a> 铺垫</h2><p>首先介绍一下今天要使用到的工具<code>Lettuce</code>，它是一个可伸缩线程安全的redis客户端。多个线程可以共享同一个<code>RedisConnection</code>，利用nio框架<code>Netty</code>来高效地管理多个连接。</p><p>放眼望向现在常用的redis客户端开发工具包，虽然能用的不少，但是目前率先拥抱redis6.0，支持客户端缓存功能的却不多，而lettuce就是其中的领跑者。</p><p>我们先在项目中引入最新版本的依赖，下面正式开始实战环节：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.1.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h2><p>在项目中应用lettuce，开启并使用客户端缓存功能，只需要下面这一段代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建 RedisClient 连接信息</span>
    <span class="token class-name">RedisURI</span> redisURI<span class="token operator">=</span> <span class="token class-name">RedisURI</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">withHost</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">withPort</span><span class="token punctuation">(</span><span class="token number">6379</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">RedisClient</span> client <span class="token operator">=</span> <span class="token class-name">RedisClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>redisURI<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StatefulRedisConnection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> connect <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CacheFrontend</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> frontend<span class="token operator">=</span><span class="token class-name">ClientSideCaching</span><span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token class-name">CacheAccessor</span><span class="token punctuation">.</span><span class="token function">forMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">,</span>
            connect<span class="token punctuation">,</span> <span class="token class-name">TrackingArgs<span class="token punctuation">.</span>Builder</span><span class="token punctuation">.</span><span class="token function">enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noloop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> key<span class="token operator">=</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> frontend<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码主要完成了几项工作：</p><ul><li>通过<code>RedisURI</code>配置redis连接的标准信息，并建立连接</li><li>创建用于充当本地缓存的<code>Map</code>，开启客户端缓存功能，建立一个缓存访问器<code>CacheFrontend</code></li><li>在循环中使用<code>CacheFrontend</code>，不断查询同一个key对应的值并打印</li></ul><p>启动上面的程序，控制台会不断的打印<code>user</code>对应的缓存，在启动一段时间后，我们在其他的客户端修改<code>user</code>对应的值，运行的结果如下：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24be3e04522744939dc2be7252141073~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，在其他客户端修改了key所对应的值后，打印结果也发生了变化。但是到这里，我们也不知道<code>lettuce</code>是不是真的使用了客户端缓存，虽然结果正确，但是说不定是它每次都重新执行了<code>get</code>命令呢？</p><p>所以我们下面来看看源码，分析一下具体的代码执行流程。</p><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>在上面的代码中，最关键的类就是<code>CacheFrontend</code>了，我们再来仔细看一下上面具体实例化时的语句：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CacheFrontend</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> frontend<span class="token operator">=</span><span class="token class-name">ClientSideCaching</span><span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>
        <span class="token class-name">CacheAccessor</span><span class="token punctuation">.</span><span class="token function">forMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">,</span>
        connect<span class="token punctuation">,</span>
        <span class="token class-name">TrackingArgs<span class="token punctuation">.</span>Builder</span><span class="token punctuation">.</span><span class="token function">enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noloop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先调用了<code>ClientSideCaching</code>的<code>enable()</code>方法，我们看一下它的源码：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6998b61b4d3242f187dc06668e6b880b~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>解释一下传入的3个参数：</p><ul><li><code>CacheAccessor</code>：一个定义对客户端缓存进行访问接口，上面调用它的<code>forMap</code>方法返回的是一个<code>MapCacheAccessor</code>，它的底层使用的我们自定义的<code>Map</code>来存放本地缓存，并且提供了<code>get</code>、<code>put</code>、<code>evict</code>等方法操作<code>Map</code></li><li><code>StatefulRedisConnection</code>：使用到的redis连接</li><li><code>TrackingArgs</code>：客户端缓存的参数配置，使用<code>noloop</code>后不会接收当前连接修改key后的通知</li></ul><p>向redis服务端发送开启<code>tracking</code>的命令后，继续向下调用<code>create()</code>方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1fdebdd790b4a769f17d6b1ad9a3ec7~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个过程中实例化了一个重要对象，它就是实现了<code>RedisCache</code>接口的<code>DefaultRedisCache</code>对象，实际向redis执行查询时的<code>get</code>请求、写入的<code>put</code>请求，都是由它来完成。</p><p>实例化完成后，继续向下调用同名的<code>create()</code>方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86b4e171be3648dc81acd58abe122857~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在这个方法中，实例化了<code>ClientSideCaching</code>对象，注意一下传入的两个参数，通过前面的介绍也很好理解它们的分工：</p><ul><li>当本地缓存存在时，直接从<code>CacheAccessor</code>中读取</li><li>当本地缓存不存在时，使用<code>RedisCache</code>从服务端读取</li></ul><p>需要额外注意一下的是返回前的两行代码，先看第一句（行号<strong>114</strong>的那行）。</p><p>这里向<code>RedisCache</code>添加了一个监听，当监听到类型为<code>invalidate</code>的作废消息时，拿到要作废的key，传递给消费者。一般情况下，<code>keys</code>中只会有一个元素。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba0c731445fc42b6927914eb75939894~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>消费时会遍历当前<code>ClientSideCaching</code>的消费者列表<code>invalidationListeners</code>：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a22e038333040f0a4c5474dcaf4f6c4~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>而这个列表中的所有，就是在上面的第二行代码中（行号<strong>115</strong>的那行）添加的，看一下方法的定义：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53a93d5983904aae933c12cca40bd894~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>而实际传入的方法引用则是下面<code>MapCacheAccessor</code>的<code>evict()</code>方法，也就是说，当收到key作废的消息后，会移除掉本地缓存<code>Map</code>中缓存的这个数据。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ead3a6490e1414ebbe288c1c8578325~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>客户端缓存的<strong>作废</strong>逻辑我们梳理清楚了，再来看看它是何时写入的，直接看<code>ClientSideCaching</code>的<code>get()</code>方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab46b916155b4d8cb76b927b9a2c42ef~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，<code>get</code>方法会先从本地缓存<code>MapCacheAccessor</code>中尝试获取，如果取到则直接返回，如果没有再使用<code>RedisCache</code>读取redis中的缓存，并将返回的结果存入到<code>MapCacheAccessor</code>中。</p><h2 id="图解" tabindex="-1"><a class="header-anchor" href="#图解" aria-hidden="true">#</a> 图解</h2><p>源码看到这里，是不是基本逻辑就串联起来了，我们再画两张图来梳理一下这个流程。先看<code>get</code>的过程：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c200310f025449d9793da62a63ba763~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>再来看一下通知客户端缓存失效的过程：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc374544cce34ea2be88e7742fdf2279~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>怎么样，配合这两张图再理解一下，是不是很完美？</p><p>其实也不是…回忆一下我们之前使用两级缓存<code>Caffeine+Redis</code>时，当时使用的通知机制，会在修改redis缓存后通知所有主机修改本地缓存，修改成为最新的值。目前的lettuce看来，显然不满足这一功能，只能做到作废删除缓存但是不会主动更新。</p><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h2><p>那么，如果想实现本地客户端缓存的<strong>实时更新</strong>，我们应该如何在现在的基础上进行扩展呢？仔细想一下的话，思路也很简单：</p><ul><li>首先，移除掉<code>lettuce</code>的客户端缓存本身自带的作废消息监听器</li><li>然后，添加我们自己的作废消息监听器</li></ul><p>回顾一下上面源码分析的图，在调用<code>DefaultRedisCache</code>的<code>addInvalidationListener()</code>方法时，其实是调用的是<code>StatefulRedisConnection</code>的<code>addListener()</code>方法，也就是说，这个监听器其实是添加在redis连接上的。</p><p>如果我们再看一下这个方法源码的话，就会发现，在它的附近还有一个对应的<code>removeListener()</code>方法，一看就是我们要找的东西，准备用它来移除消息监听。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c826594cedc43ccb5c7a4b2197d75f1~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不过再仔细看看，这个方法是要传参数的啊，我们明显不知道现在里面已经存在的<code>PushListener</code>有什么，所以没法直接使用，那么无奈只能再接着往下看看这个<code>pushHandler</code>是什么玩意…</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a1932e36b46470f8e1b0be4bdc3b71f~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过注释可以知道，这个<code>PushHandler</code>就是一个用来操作<code>PushListener</code>的处理工具，虽然我们不知道具体要移除的<code>PushListener</code>是哪一个，但是惊喜的是，它提供了一个<code>getPushListeners()</code>方法，可以获取当前所有的监听器。</p><p>这样一来就简单了，我上来直接清除掉这个集合中的所有监听器，问题就迎刃而解了~</p><p>不过，在<code>StatefulRedisConnectionImpl</code>中的<code>pushHandler</code>是一个私有对象，也没有对外进行暴露，想要操作起来还是需要费上一点功夫的。下面，我们就在分析的结果上进行代码的修改。</p><h2 id="魔改" tabindex="-1"><a class="header-anchor" href="#魔改" aria-hidden="true">#</a> 魔改</h2><p>首先，我们需要自定义一个工具类，它的主要功能是操作监听器，所以就命名为<code>ListenerChanger</code>好了。它要完成的功能主要有三个：</p><ul><li>移除原有的全部消息监听</li><li>添加新的自定义消息监听</li><li>更新本地缓存<code>MapCacheAccessor</code>中的数据</li></ul><p>首先定义构造方法，需要传入<code>StatefulRedisConnection</code>和<code>CacheAccessor</code>作为参数，在后面的方法中会用到，并且创建一个<code>RedisCommands</code>，用于后面向redis服务端发送<code>get</code>命令请求。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListenerChanger</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">StatefulRedisConnection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> connection<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">CacheAccessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> mapCacheAccessor<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisCommands</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> command<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ListenerChanger</span><span class="token punctuation">(</span><span class="token class-name">StatefulRedisConnection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> connection<span class="token punctuation">,</span>
                           <span class="token class-name">CacheAccessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> mapCacheAccessor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>connection <span class="token operator">=</span> connection<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mapCacheAccessor <span class="token operator">=</span> mapCacheAccessor<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//其他方法先省略……</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="移除监听" tabindex="-1"><a class="header-anchor" href="#移除监听" aria-hidden="true">#</a> 移除监听</h3><p>前面说过，<code>pushHandler</code>是一个私有对象，我们无法直接获取和操作，所以只能先使用反射获得。<code>PushHandler</code>中的监听器列表存储在一个<code>CopyOnWriteArrayList</code>中，我们直接使用迭代器移除掉所有内容即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeAllListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span> connectionClass <span class="token operator">=</span> <span class="token class-name">StatefulRedisConnectionImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> pushHandlerField <span class="token operator">=</span> connectionClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;pushHandler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pushHandlerField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PushHandler</span> pushHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PushHandler</span><span class="token punctuation">)</span> pushHandlerField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PushListener</span><span class="token punctuation">&gt;</span></span> pushListeners
                <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CopyOnWriteArrayList</span><span class="token punctuation">)</span> pushHandler<span class="token punctuation">.</span><span class="token function">getPushListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PushListener</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> pushListeners<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">PushListener</span> listener <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pushListeners<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加监听" tabindex="-1"><a class="header-anchor" href="#添加监听" aria-hidden="true">#</a> 添加监听</h3><p>这里我们模仿<code>DefaultRedisCache</code>中<code>addInvalidationListener()</code>方法的写法，添加一个监听器，除了最后处理的代码基本一致。对于监听到的要作废的<code>keys</code>集合，另外启动一个线程更新本地数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNewListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PushListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPushMessage</span><span class="token punctuation">(</span><span class="token class-name">PushMessage</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;invalidate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> content <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token class-name">StringCodec</span><span class="token punctuation">.</span><span class="token constant">UTF8</span><span class="token operator">::</span><span class="token function">decodeKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> content<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;modifyKeys:&quot;</span><span class="token operator">+</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// start a new thread to update cacheAccessor</span>
                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token function">updateMap</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="本地更新" tabindex="-1"><a class="header-anchor" href="#本地更新" aria-hidden="true">#</a> 本地更新</h3><p>使用<code>RedisCommands</code>重新从redis服务端获取最新的数据，并更新本地缓存<code>mapCacheAccessor</code>中的数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateMap</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> keys<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">K</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">V</span> newValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;newValue:&quot;</span><span class="token operator">+</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mapCacheAccessor<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至于为什么执行这个方法时额外启动了一个新线程，是因为我在测试中发现，当在<code>PushListener</code>的<code>onPushMessage</code>方法中执行<code>RedisCommands</code>的<code>get()</code>方法时，会一直取不到值，但是像这样新启动一个线程就没有问题。</p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>下面，我们来写一段测试代码，来测试上面的改动。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
	<span class="token comment">// 省略之前创建连接代码……</span>
    
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CacheAccessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mapCacheAccessor <span class="token operator">=</span> <span class="token class-name">CacheAccessor</span><span class="token punctuation">.</span><span class="token function">forMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CacheFrontend</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> frontend <span class="token operator">=</span> <span class="token class-name">ClientSideCaching</span><span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>mapCacheAccessor<span class="token punctuation">,</span>
            connect<span class="token punctuation">,</span>
            <span class="token class-name">TrackingArgs<span class="token punctuation">.</span>Builder</span><span class="token punctuation">.</span><span class="token function">enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noloop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ListenerChanger</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listenerChanger
            <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListenerChanger</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>connect<span class="token punctuation">,</span> mapCacheAccessor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 移除原有的listeners</span>
    listenerChanger<span class="token punctuation">.</span><span class="token function">removeAllListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加新的监听器</span>
    listenerChanger<span class="token punctuation">.</span><span class="token function">addNewListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> frontend<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，代码基本上在之前的基础上没有做什么改动，只是在创建完<code>ClientSideCaching</code>后，执行了我们自己实现的<code>ListenerChanger</code>的两个方法。先移除所有监听器、再添加新的监听器。下面我们以debug模式启动测试代码，简单看一下代码的执行逻辑。</p><p>首先，在未执行移除操作前，<code>pushHandler</code>中的监听器列表中有一个监听器：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c47a44ec60d4b92b9d66f88c08620b6~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>移除后，监听器列表为空：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d20e88ed1af0457ea85c9d7b0bba24e7~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在添加完自定义监听器、并且执行完第一次查询操作后，在另外一个redis客户端中修改<code>user</code>的值，这时<code>PushListener</code>会收到作废类型的消息监听：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a275adebc590491fb0794e331290094c~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>启动一个新线程，查询redis中<code>user</code>对应的最新值，并放入<code>cacheAccessor</code>中：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04b3256ac4f84f10858888be2837d096~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当循环中<code>CacheFrontend</code>的<code>get()</code>方法再被执行时，会直接从<code>cacheAccessor</code>中取到刷新后的值，不需要再次去访问redis服务端了：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f116d7191d74727a0ae8c3cfbed713c~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>到这里，我们基于<code>lettuce</code>的客户端缓存的基本使用、以及在这个基础上进行的魔改就基本完成了。可以看到，<code>lettuce</code>客户端已经在底层封装了一套比较成熟的API，能让我们在将redis升级到6.0以后，开箱即用式地使用客户端缓存这一新特性。在使用中，不需要我们关注底层原理，也不用做什么业务逻辑的改造，总的来说，使用起来还是挺香的。</p><p>那么，这次的分享就到这里，我是Hydra，下篇文章再见。</p>`,91);function o(i,l){return s(),a("div",null,[e(" more "),c])}const d=n(p,[["render",o],["__file","Redis6ClientSideCache.html.vue"]]);export{d as default};
