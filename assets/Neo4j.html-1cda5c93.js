import{_ as p,W as o,X as c,$ as i,Y as n,a0 as s,a1 as e,Z as t,C as l}from"./framework-9e67db09.js";const u={},d=n("p",null,"哈喽大家好啊，我是Hydra。",-1),r=n("p",null,"虽然距离中秋放假还要熬过漫长的两天，不过也有个好消息，今天是《雷神4》上线Disney+流媒体的日子（也就是说我们稍后就可以网盘见了）~",-1),k=n("p",null,[s("了解北欧神话的小伙伴们应该知道，它的神话体系可以用一个字来形容，那就是『"),n("strong",null,"乱"),s("』！就像是雷神3中下面这张错综复杂的关系网，也只能算是其中的一支半节。")],-1),v=n("figure",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8170494a10d742969ebb11adbed0b668~tplv-k3u1fbpfcp-zoom-1.image",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),m={href:"https://juejin.cn/post/7143058686032740389",target:"_blank",rel:"noopener noreferrer"},g=t('<p>本文将通过下面几个主要模块，构建自然界中实体间的联系，实现知识图谱描述：</p><ul><li>图数据库neo4j安装</li><li>简单CQL入门</li><li>springboot整合neo4j</li><li>文本SPO抽取</li><li>动态构建知识图谱</li></ul><h2 id="neo4j安装" tabindex="-1"><a class="header-anchor" href="#neo4j安装" aria-hidden="true">#</a> Neo4j安装</h2><p>知识图谱的底层依赖于关键的图数据库，在这里我们选择Neo4j，它是一款高性能的 nosql 图形数据库，能够将结构化的数据存储在<strong>图</strong>而不是<strong>表</strong>中。</p><p>首先进行安装，打开官网下载Neo4j的安装包，下载免费的community社区版就可以，地址放在下面：</p>',5),b={href:"https://neo4j.com/download/other-releases/",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>需要注意的是，neo4j 4.x以上的版本都需要依赖 jdk11环境，所以如果运行环境是jdk8的话，那么还是老老实实下载3.x版本就行，下载解压完成后，在<code>bin</code>目录下通过命令启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>neo4j console
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动后在浏览器访问安装服务器的7474端口，就可以打开neo4j的控制台页面：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c9a9b76bab24f759f377a26c68e64ae~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过左侧的导航栏，我们依次可以查看存储的数据、一些基础查询的示例以及一些帮助说明。</p><p>而顶部带有<code>$</code>符号的输入框，可以用来输入neo4j特有的CQL查询语句并执行，具体的语法我们放在下面介绍。</p><h2 id="简单cql入门" tabindex="-1"><a class="header-anchor" href="#简单cql入门" aria-hidden="true">#</a> 简单CQL入门</h2><p>就像我们平常使用关系型数据库中的SQL语句一样，neo4j中可以使用Cypher查询语言（CQL）进行图形数据库的查询，我们简单来看一下增删改查的用法。</p><h3 id="添加节点" tabindex="-1"><a class="header-anchor" href="#添加节点" aria-hidden="true">#</a> 添加节点</h3><p>在CQL中，可以通过<code>CREATE</code>命令去创建一个节点，创建不含有属性节点的语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>node<span class="token operator">-</span>name<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>label<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>CREATE</code>语句中，包含两个基础元素，节点名称<code>node-name</code>和标签名称<code>lable-name</code>。标签名称相当于关系型数据库中的表名，而节点名称则代指这一条数据。</p><p>以下面的<code>CREATE</code>语句为例，就相当于在<code>Person</code>这张表中创建一条没有属性的空数据。</p><div class="language-cql line-numbers-mode" data-ext="cql"><pre class="language-cql"><code>CREATE (索尔:Person)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而创建包含属性的节点时，可以在标签名称后面追加一个描绘属性的<code>json</code>字符串：</p><div class="language-cql line-numbers-mode" data-ext="cql"><pre class="language-cql"><code>CREATE (
   &lt;node-name&gt;:&lt;label-name&gt;
   {    
      &lt;key1&gt;:&lt;value1&gt;,
      …
      &lt;keyN&gt;:&lt;valueN&gt;
   }
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用下面的语句创建一个包含属性的节点：</p><div class="language-cql line-numbers-mode" data-ext="cql"><pre class="language-cql"><code>CREATE (洛基:Person {name:&quot;洛基&quot;,title:&quot;诡计之神&quot;})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询节点" tabindex="-1"><a class="header-anchor" href="#查询节点" aria-hidden="true">#</a> 查询节点</h3><p>在创建完节点后，我们就可以使用<code>MATCH</code>匹配命令查询已存在的节点及属性的数据，命令的格式如下：</p><div class="language-CQL line-numbers-mode" data-ext="CQL"><pre class="language-CQL"><code>MATCH (&lt;node-name&gt;:&lt;label-name&gt;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通常，<code>MATCH</code>命令在后面配合<code>RETURN</code>、<code>DELETE</code>等命令使用，执行具体的返回或删除等操作。</p><p>执行下面的命令：</p><div class="language-cql line-numbers-mode" data-ext="cql"><pre class="language-cql"><code>MATCH (p:Person) RETURN p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看可视化的显示结果：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/482499917b2e4f0bbb2b7138a2eb7f53~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到上面添加的两个节点，分别是不包含属性的空节点和包含属性的节点，并且所有节点会有一个默认生成的<code>id</code>作为唯一标识。</p><h3 id="删除节点" tabindex="-1"><a class="header-anchor" href="#删除节点" aria-hidden="true">#</a> 删除节点</h3><p>接下来，我们删除之前创建的不包含属性的无用节点，上面提到过，需要使用<code>MATCH</code>配合<code>DELETE</code>进行删除。</p><div class="language-cql line-numbers-mode" data-ext="cql"><pre class="language-cql"><code>MATCH (p:Person) WHERE id(p)=100 
DELETE p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这条删除语句中，额外使用了<code>WHERE</code>过滤条件，它与SQL中的<code>WHERE</code>非常相似，命令中通过节点的<code>id</code>进行了过滤。</p><p>删除完成后，再次执行查询操作，可以看到只保留了<code>洛基</code>这一个节点：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c18e45c007c4a53b67f2ae4271ef039~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="添加关联" tabindex="-1"><a class="header-anchor" href="#添加关联" aria-hidden="true">#</a> 添加关联</h3><p>在neo4j图数据库中，遵循属性图模型来存储和管理数据，也就是说我们可以维护节点之间的关系。</p><p>在上面，我们创建过一个节点，所以还需要再创建一个节点作为关系的两端：</p><div class="language-cql line-numbers-mode" data-ext="cql"><pre class="language-cql"><code>CREATE (p:Person {name:&quot;索尔&quot;,title:&quot;雷神&quot;})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建关系的基本语法如下：</p><div class="language-cql line-numbers-mode" data-ext="cql"><pre class="language-cql"><code>CREATE (&lt;node-name1&gt;:&lt;label-name1&gt;) 
- [&lt;relation-name&gt;:&lt;relation-label-name&gt;]
-&gt; (&lt;node-name2&gt;:&lt;label-name2&gt;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，也可以利用已经存在的节点创建关系，下面我们借助<code>MATCH</code>先进行查询，再将结果进行关联，创建两个节点之间的关联关系：</p><div class="language-cql line-numbers-mode" data-ext="cql"><pre class="language-cql"><code>MATCH (m:Person),(n:Person) 
WHERE m.name=&#39;索尔&#39; and n.name=&#39;洛基&#39; 
CREATE (m)-[r:BROTHER {relation:&quot;无血缘兄弟&quot;}]-&gt;(n)
RETURN r
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加完成后，可以通过关系查询符合条件的节点及关系：</p><div class="language-cql line-numbers-mode" data-ext="cql"><pre class="language-cql"><code>MATCH (m:Person)-[re:BROTHER]-&gt;(n:Person) 
RETURN m,re,n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到两者之间已经添加了关联：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15462dafb0284b159c654799f222f3f9~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需要注意的是，如果节点被添加了关联关系后，单纯删除节点的话会报错，：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>Neo.ClientError.Schema.ConstraintValidationFailed
Cannot delete node&lt;85&gt;, because it still has relationships. To delete this node, you must first delete its relationships.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这时，需要在删除节点时同时删除关联关系：</p><div class="language-CQL line-numbers-mode" data-ext="CQL"><pre class="language-CQL"><code>MATCH (m:Person)-[r:BROTHER]-&gt;(n:Person) 
DELETE m,r
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的语句，就会在删除节点的同时，删除它所包含的关联关系了。</p><p>那么，简单的cql语句入门到此为止，它已经基本能够满足我们的简单业务场景了，下面我们开始在springboot中整合neo4j。</p><h2 id="springboot整合neo4j" tabindex="-1"><a class="header-anchor" href="#springboot整合neo4j" aria-hidden="true">#</a> SpringBoot整合Neo4j</h2><p>创建一个springboot项目，这里使用的是<code>2.3.4</code>版本，引入neo4j的依赖坐标：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-neo4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>application.yml</code>中配置neo4j连接信息：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">data</span><span class="token punctuation">:</span>
    <span class="token key atrule">neo4j</span><span class="token punctuation">:</span>
      <span class="token key atrule">uri</span><span class="token punctuation">:</span> bolt<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">7687</span>
      <span class="token key atrule">username</span><span class="token punctuation">:</span> neo4j
      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家如果对<code>jpa</code>的应用非常熟练的话，那么接下来的过程可以说是轻车熟路，因为它们基本上是一个模式，同样是构建model层、repository层，然后在此基础上操作自定义或模板方法就可以了。</p><h3 id="节点实体" tabindex="-1"><a class="header-anchor" href="#节点实体" aria-hidden="true">#</a> 节点实体</h3><p>我们可以使用基于注解的实体映射来描述图中的节点，通过在实体类上添加<code>@NodeEntity</code>表明它是图中的一个节点实体，在属性上添加<code>@Property</code>代表它是节点中的具体属性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NodeEntity</span><span class="token punctuation">(</span>label <span class="token operator">=</span> <span class="token string">&quot;Person&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Property</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Property</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一个实体类，就代表它创建的实例节点的<code>&lt;label-name&gt;</code>为<code>Person</code>，并且每个节点拥有<code>name</code>和<code>title</code>两个属性。</p><h3 id="repository持久层" tabindex="-1"><a class="header-anchor" href="#repository持久层" aria-hidden="true">#</a> Repository持久层</h3><p>对上面的实体构建持久层接口，继承<code>Neo4jRepository</code>接口，并在接口上添加<code>@Repository</code>注解即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">NodeRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Neo4jRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;MATCH p=(n:Person) RETURN p&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;MATCH(p:Person{name:{name}}) return p&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Node</span> <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在接口中添加了个两个方法，供后面测试使用，<code>selectAll()</code>用于返回全部数据，<code>findByName()</code>用于根据<code>name</code>查询特定的节点。</p><p>接下来，在service层中调用repository层的模板方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">NodeService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">NodeRepository</span> nodeRepository<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> save <span class="token operator">=</span> nodeRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> save<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端调用<code>save()</code>接口，添加一个节点后，再到控制台用查询语句进行查询，可以看到新的节点已经通过接口方式被添加到了图中：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a44149300f0844fcbe49bc6779e41d1c~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在service中再添加一个方法，用于查询全部节点，直接调用我们在<code>NodeRepository</code>中定义的<code>selectAll()</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> nodes <span class="token operator">=</span> nodeRepository<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nodes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在控制台打印了查询结果：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/810b2d56427a4c26bc64772b0599fcd2~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对节点的操作我们就介绍到这里，接下来开始构建节点间的关联关系。</p><h3 id="关联关系" tabindex="-1"><a class="header-anchor" href="#关联关系" aria-hidden="true">#</a> 关联关系</h3><p>在neo4j中，关联关系其实也可以看做一种特殊的实体，所以可以用实体类来对其进行描述。与节点不同，需要在类上添加<code>@RelationshipEntity</code>注解，并通过<code>@StartNode</code>和<code>@EndNode</code>指定关联关系的开始和结束节点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@RelationshipEntity</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">&quot;Relation&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Relation</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@StartNode</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span> startNode<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@EndNode</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span> endNode<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Property</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> relation<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，接下来也为它创建一个持久层的接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RelationRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Neo4jRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Relation</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;MATCH p=(n:Person)-[r:Relation]-&gt;(m:Person) &quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;WHERE id(n)={startNode} and id(m)={endNode} and r.relation={relation}&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;RETURN p&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Relation</span><span class="token punctuation">&gt;</span></span> <span class="token function">findRelation</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;startNode&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Node</span> startNode<span class="token punctuation">,</span>
                                <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;endNode&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Node</span> endNode<span class="token punctuation">,</span>
                                <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;relation&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> relation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在接口中自定义了一个根据起始节点、结束节点以及关联内容查询关联关系的方法，我们会在后面用到。</p><h3 id="创建关联" tabindex="-1"><a class="header-anchor" href="#创建关联" aria-hidden="true">#</a> 创建关联</h3><p>在service层中，创建提供一个根据节点名称构建关联关系的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">String</span> name1<span class="token punctuation">,</span> <span class="token class-name">String</span> name2<span class="token punctuation">,</span> <span class="token class-name">String</span> relationName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> start <span class="token operator">=</span> nodeRepository<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> end <span class="token operator">=</span> nodeRepository<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Relation</span> relation <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Relation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    relation<span class="token punctuation">.</span><span class="token function">setStartNode</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    relation<span class="token punctuation">.</span><span class="token function">setEndNode</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>
    relation<span class="token punctuation">.</span><span class="token function">setRelation</span><span class="token punctuation">(</span>relationName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    relationRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>relation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过接口调用这个方法，绑定<code>海拉</code>和<code>索尔</code>之间的关系后，查询结果：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5969ea5e84a40f1ad9034f231c4eb10~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="文本spo抽取" tabindex="-1"><a class="header-anchor" href="#文本spo抽取" aria-hidden="true">#</a> 文本SPO抽取</h2><p>在项目中构建知识图谱时，很大一部分场景是基于非结构化的数据，而不是由我们手动输入确定图谱中的节点或关系。因此，我们需要基于文本进行知识抽取的能力，简单来说就是要在一段文本中抽取出SPO主谓宾三元组，来构成图谱中的点和边。</p><p>这里我们借助Git上一个现成的工具类，来进行文本的语义分析和SPO三元组的抽取工作，项目地址：</p>`,88),h={href:"https://github.com/hankcs/MainPartExtractor",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>这个项目虽然比较简单一共就两个类两个资源文件，但其中的工具类却能够有效帮助我们完成句子中的主谓宾的提取，使用它前需要先引入依赖的坐标：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.hankcs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hanlp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>portable-1.2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>edu.stanford.nlp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>stanford-parser<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后把这个项目中<code>com.hankcs.nlp.lex</code>包下的两个类拷到我们的项目中，把<code>resources</code>下的<code>models</code>目录拷贝到我们的<code>resources</code>下。</p><p>完成上面的步骤后，调用<code>MainPartExtractor</code>工具类中的方法，进行一下简单的文本SPO抽取测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mpTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> testCaseArray <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;我一直很喜欢你&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;你被我喜欢&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;美丽又善良的你被卑微的我深深的喜欢着……&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;小米公司主要生产智能手机&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;他送给了我一份礼物&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;这类算法在有限的一段时间内终止&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;如果大海能够带走我的哀愁&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;天青色等烟雨，而我在等你&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;我昨天看见了一个非常可爱的小孩&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> testCase <span class="token operator">:</span> testCaseArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MainPart</span> mp <span class="token operator">=</span> <span class="token class-name">MainPartExtractor</span><span class="token punctuation">.</span><span class="token function">getMainPart</span><span class="token punctuation">(</span>testCase<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s   %s   %s \\n&quot;</span><span class="token punctuation">,</span>
                <span class="token class-name">GraphUtil</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">GraphUtil</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">getPredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">GraphUtil</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在处理结果<code>MainPart</code>中，比较重要的是其中的<code>subject</code>、<code>predicate</code>和<code>object</code>三个属性，它们的类型是<code>TreeGraphNode</code>，封装了句子的主谓宾语成分。下面我们看一下测试结果：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e74c0fe864aa469b87065becc5b1abd0~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，如果句子中有明确的主谓宾语，那么则会进行抽取。如果某一项为空，则该项为<code>null</code>，其余句子结构也能够正常抽取。</p><h2 id="动态构建知识图谱" tabindex="-1"><a class="header-anchor" href="#动态构建知识图谱" aria-hidden="true">#</a> 动态构建知识图谱</h2><p>在上面的基础上，我们就可以在项目中动态构建知识图谱了，新建一个<code>TextAnalysisServiceImpl</code>，其中实现两个关键方法。</p><p>首先是根据句子中抽取的主语或宾语在neo4j中创建节点的方法，这里根据节点的<code>name</code>判断是否为已存在的节点，如果存在则直接返回，不存在则添加：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addNode</span><span class="token punctuation">(</span><span class="token class-name">TreeGraphNode</span> treeGraphNode<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> nodeName <span class="token operator">=</span> <span class="token class-name">GraphUtil</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span>treeGraphNode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Node</span> existNode <span class="token operator">=</span> nodeRepository<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>existNode<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> existNode<span class="token punctuation">;</span>

    <span class="token class-name">Node</span> node <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nodeRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是核心方法，说白了也很简单，参数传进来一个句子作为文本先进行spo的抽取，对实体进行<code>Node</code>的保存，再查看是否已经存在同名的关系，如果不存在则创建关联关系，存在的话则不重复创建。下面是关键代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Relation</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseAndBind</span><span class="token punctuation">(</span><span class="token class-name">String</span> sentence<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MainPart</span> mp <span class="token operator">=</span> <span class="token class-name">MainPartExtractor</span><span class="token punctuation">.</span><span class="token function">getMainPart</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">TreeGraphNode</span> subject <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//主语</span>
    <span class="token class-name">TreeGraphNode</span> predicate <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">getPredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//谓语</span>
    <span class="token class-name">TreeGraphNode</span> object <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//宾语</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token class-name">Node</span> startNode <span class="token operator">=</span> <span class="token function">addNode</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> endNode <span class="token operator">=</span> <span class="token function">addNode</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> relationName <span class="token operator">=</span> <span class="token class-name">GraphUtil</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关系词</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Relation</span><span class="token punctuation">&gt;</span></span> oldRelation <span class="token operator">=</span> relationRepository
            <span class="token punctuation">.</span><span class="token function">findRelation</span><span class="token punctuation">(</span>startNode<span class="token punctuation">,</span> endNode<span class="token punctuation">,</span>relationName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldRelation<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> oldRelation<span class="token punctuation">;</span>

    <span class="token class-name">Relation</span> botRelation<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Relation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    botRelation<span class="token punctuation">.</span><span class="token function">setStartNode</span><span class="token punctuation">(</span>startNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    botRelation<span class="token punctuation">.</span><span class="token function">setEndNode</span><span class="token punctuation">(</span>endNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    botRelation<span class="token punctuation">.</span><span class="token function">setRelation</span><span class="token punctuation">(</span>relationName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Relation</span> relation <span class="token operator">=</span> relationRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>botRelation<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>relation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个简单的controller接口，用于接收文本：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;parse&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Relation</span><span class="token punctuation">&gt;</span></span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span> sentence<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> textAnalysisService<span class="token punctuation">.</span><span class="token function">parseAndBind</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们从前端传入下面几个句子文本进行测试：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>海拉又被称为死亡女神
死亡女神捏碎了雷神之锤
雷神之锤属于索尔
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用完成后，我们再来看看neo4j中的图形关系，可以看到<strong>海拉</strong>、<strong>死亡女神</strong>、<strong>索尔</strong>、<strong>锤</strong>这些实体被关联在了一起：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7cd96647ca654485886dd13757e9188f~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>到这里，一个简单的文本处理和图谱创建的流程就被完整的串了起来，但是这个流程还是比较粗糙，之后还需要在下面几个方面继续优化：</p><ul><li>当前使用的还是单一类型的节点和关联关系，后续可以在代码中丰富更多类型的节点和关联关系实体类</li><li>文中使用的文本spo抽取效果一般，如果应用于企业项目，那么建议基于更精确的nlp算法去做语义分析</li><li>当前抽取的节点只包含了实体的名称，不包含具体的属性，后续需要继续完善补充实体的属性</li><li>完善知识融合，主要是添加实体的指代消解以及属性的融合功能</li></ul><p>总之，需要完善的部分还有不少，项目代码我也传到git上了，大家如果有兴趣可以看看，后续如果有时间的话我也会基于这个版本继续改进，公众号后台回复『<strong>neo</strong>』获取项目地址。</p><p>那么，这次的分享就到这里，我是Hydra，我们下篇再见。</p>`,24);function N(j,q){const a=l("ExternalLinkIcon");return o(),c("div",null,[i(" more "),d,r,k,v,n("p",null,[s("而我们在"),n("a",m,[s("上一篇文章中，介绍了关于知识图谱的一些基本理论知识"),e(a)]),s("，俗话说的好，光说不练假把式，今天我们就来看看，如何在springboot项目中，实现并呈现这张雷神中复杂的人物关系图谱。")]),g,n("blockquote",null,[n("p",null,[n("a",b,[s("https://neo4j.com/download/other-releases/"),e(a)])])]),f,n("blockquote",null,[n("p",null,[n("a",h,[s("https://github.com/hankcs/MainPartExtractor"),e(a)])])]),y])}const R=p(u,[["render",N],["__file","Neo4j.html.vue"]]);export{R as default};
