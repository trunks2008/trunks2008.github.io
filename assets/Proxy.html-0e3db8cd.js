import{_ as n,W as s,X as a,$ as p,Z as t}from"./framework-9e67db09.js";const e={},c=t(`<p>代理（Proxy）模式是我们在工作中广泛使用的设计模式之一，提供了对目标对象额外的访问方式。通过代理对象来访问目标对象，可以对目标对象进行功能的增强，即扩展目标对象的功能。例如在Spring中，AOP就是使用动态代理来实现的。</p><p>举个栗子，当我们买不到演唱会门票时，只能通过找黄牛替我们买票，将买票这一过程交给他们去代办。在这一环节中，我们不接触到真正的购票公司，黄牛就相当于是代理。目标对象购票公司提供一个代理对象黄牛，通过黄牛可以调用购票公司的部分功能（买票），并添加一些额外的业务功能（交额外的手续费）。</p><p>JAVA中实现代理的存在两种方式，下面分别对其进行介绍。</p><h3 id="一、静态代理" tabindex="-1"><a class="header-anchor" href="#一、静态代理" aria-hidden="true">#</a> 一、静态代理</h3><p>从创建时期来看，静态代理是由程序员创建或特定工具自动生成源代码再对其编译。在程序运行前代理类的class文件就已经存在了。 从实现方式来看，又可分为继承和聚合两种方式。通过代理类的对象调用重写的方法时，实际上执行的是被代理类同样的方法的调用。</p><h4 id="_1、继承方式" tabindex="-1"><a class="header-anchor" href="#_1、继承方式" aria-hidden="true">#</a> 1、继承方式</h4><p>代理类继承目标类，重写目标类中需要增强的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//售票公司</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketCompany</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;售票&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//黄牛</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketScalper</span> <span class="token keyword">extends</span> <span class="token class-name">TicketCompany</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;收手续费&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、聚合方式" tabindex="-1"><a class="header-anchor" href="#_2、聚合方式" aria-hidden="true">#</a> 2、聚合方式</h4><p>代理类和目标类实现同一个接口，代理对象当中要包含目标对象。代理类中通过注入目标类的对象，然后重写方法进行功能增强。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//售票公司</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketCompany</span> <span class="token keyword">implements</span> <span class="token class-name">Company</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;售票&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//黄牛</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketScalper</span> <span class="token keyword">implements</span> <span class="token class-name">Company</span><span class="token punctuation">{</span>
    <span class="token class-name">TicketCompany</span> ticketCompany<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">TicketScalper</span><span class="token punctuation">(</span> <span class="token class-name">TicketCompany</span> ticketCompany<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ticketCompany<span class="token operator">=</span>ticketCompany<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ticketCompany<span class="token punctuation">.</span><span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;收手续费&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上两种静态代理方式，可以做到在不修改目标对象的功能前提下，对目标功能进行扩展。但是也存在一些缺点，每当我们需要扩展目标类的功能时，就需要重写一个代理类，容易造成代理类过多，项目结构复杂。此外，一旦接口增加方法，目标对象与代理对象都要维护。</p><p>总结：如果在不确定的情况下，尽量不要去使用静态代理。因为一旦写代码，就会产生类，容易造成文件规模的大量增长。那么如何解决这些缺陷呢？我们使用动态代理。</p><h3 id="二、动态代理" tabindex="-1"><a class="header-anchor" href="#二、动态代理" aria-hidden="true">#</a> 二、动态代理</h3><p>在静态代理中，一个代理对象只能代理一个目标对象，并且在编译时就已经确定代理逻辑。而动态代理是在运行时，通过反射机制动态创建而成，并且能够代理各种类型的对象。而动态代理也存在两种方式，JDK动态代理与CGLIB代理。</p><h4 id="_1、jdk动态代理" tabindex="-1"><a class="header-anchor" href="#_1、jdk动态代理" aria-hidden="true">#</a> 1、JDK动态代理</h4><p>Java中的<code>Proxy</code>类，提供了<code>newInstance</code>静态方法可以动态生成代理对象。</p><p>先看看代码实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketScalperJdkProxy</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TicketCompany</span> ticketCompany <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketCompany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Company</span> company <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Company</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ticketCompany<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                ticketCompany<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;sellTicket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;黄牛收取手续费&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>ticketCompany<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        company<span class="token punctuation">.</span><span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>newProxyInstance</code>方法中传入的三个参数，依次为：</p><ul><li><code>ClassLoader loader</code>：指定当前目标对象使用类加载器，一般使用目标对象的类加载器</li><li><code>Class&lt;?&gt;[] interfaces</code>：目标对象实现的接口的类型，使用泛型方式确认类型</li><li><code>InvocationHandler h</code>：事件处理，执行目标对象的方法时，会触发事件处理器的方法,会把当前执行目标对象的方法作为参数传入，通过其中的<code>invoke</code>方法进行功能的增强</li></ul><p>从传入的第二个参数中，可以发现，要实现JDK动态代理，目标对象必须实现一个接口，才能对接口中的方法进行代理。那么如果没有实现接口呢？CGLIB为我们提供了另一种方式。</p><h4 id="_2、cglib代理" tabindex="-1"><a class="header-anchor" href="#_2、cglib代理" aria-hidden="true">#</a> 2、CGLIB代理</h4><p>JDK动态代理虽然简单易用，但是只能对接口进行代理。如果被代理的类是一个普通类没有接口，那么JDK动态代理就没法使用了，这时就可以使用CGLIB基于继承来实现代理。</p><p>CGLIB（<code>Code Generator Library</code>）是一个强大的、高性能的代码生成库。底层使用了ASM（一个短小精悍的字节码操作框架）来操作字节码生成新的类。</p><p>使用CGLIB来实现功能增强：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Enhancer</span> enhancer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">TicketCompany</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;收手续费&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Object</span> result <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;完成交易&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> result<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TicketCompany</span> sampleClass<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">TicketCompany</span><span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sampleClass<span class="token punctuation">.</span><span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，目标类不能为final，目标对象的方法如果为final / static，那么就不会被拦截，即不会执行目标对象额外的业务方法。</p><p>最后顺带看一下Spring AOP中使用的代理。在Spring中，通过注解来开启AOP时，默认使用的代理方式为JDK动态代理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用debug看一下获取的代理对象：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fccf1c6f45e641b687b5e1d80edf13c0~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>修改<code>@EnableAspectJAutoProxy</code>注解中<code>proxyTargetClass</code>的属性，可以将其替换为CGLIB代理方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看一下代理对象，已经变为使用CGLIB代理方式：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85cf942ab3ff40e4bad7fcab099dc767~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>总的来说，JDK动态代理使用Java原生的反射API来进行操作，在生成类上比较高效；CGLIB使用ASM框架直接对字节码进行操作，在类的执行过程中比较高效。至于具体的使用，更多还要取舍于我们的应用环境，还是那句话，没有最好的技术，只有更适用的业务场景。</p>`,37);function o(l,i){return s(),a("div",null,[p(" more "),c])}const k=n(e,[["render",o],["__file","Proxy.html.vue"]]);export{k as default};
