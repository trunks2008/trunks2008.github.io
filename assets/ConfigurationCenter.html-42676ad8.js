import{_ as a,W as p,X as t,$ as e,Y as n,a0 as o,a1 as c,Z as l,C as i}from"./framework-9e67db09.js";const u={},k=l(`<p><strong>配置中心</strong>是我们平常使用微服务架构时重要的一个模块，常用的配置中心组件也比较多，从早期的Spring Cloud Config，到Disconf、Apollo、Nacos等，它们支持的功能、产品的性能以及给用户的体验也各有不同。</p><p>虽然说功能上有不少差异，但是它们解决的最核心问题，无疑是<strong>配置文件修改后的实时生效</strong>，有时候在搬砖之余Hydra就在好奇实时生效是如何实现的、如果让我来设计又会怎么去实现，于是这几天抽出了点空闲时间，摸鱼摸出了个简易版的单机配置中心，先来看看效果：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16d8505d8ecc43f9a6786fc18b202aed~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>之所以说是简易版本，首先是因为实现的核心功能就只有配置修改后实时生效，并且代码的实现也非常简单，一共只用了8个类就实现了这个核心功能，看一下代码的结构，核心类就是<code>core</code>包中的这8个类：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a53b27fff5504394bfda0507e833b73e~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>看到这是不是有点好奇，虽说是低配版，就凭这么几个类也能实现一个配置中心？那么先看一下总体的设计流程，下面我们再细说代码。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da21b27bf8fb4a9f8f7e9ad5d638adc4~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="代码简要说明" tabindex="-1"><a class="header-anchor" href="#代码简要说明" aria-hidden="true">#</a> 代码简要说明</h2><p>下面对8个核心类进行一下简要说明并贴出核心代码，有的类中代码比较长，可能对手机浏览的小伙伴不是非常友好，建议收藏后以后电脑浏览器打开（<s>骗波收藏，计划通！</s>）。另外Hydra已经把项目的全部代码上传到了<code>git</code>，有需要的小伙伴可以移步文末获取地址。</p><h3 id="_1、scanrunner" tabindex="-1"><a class="header-anchor" href="#_1、scanrunner" aria-hidden="true">#</a> 1、ScanRunner</h3><p><code>ScanRunner</code>实现了<code>CommandLineRunner</code>接口，可以保证它在springboot启动最后执行，这样就能确保其他的Bean已经实例化结束并被放入了容器中。至于为什么起名叫<code>ScanRunner</code>，是因为这里要实现的主要就是扫描类相关功能。先看一下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScanRunner</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token function">doScanComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doScanComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> rootPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fileList <span class="token operator">=</span> <span class="token class-name">FileScanner</span><span class="token punctuation">.</span><span class="token function">findFileByType</span><span class="token punctuation">(</span>rootPath<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">FileScanner</span><span class="token punctuation">.</span><span class="token constant">TYPE_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">doFilter</span><span class="token punctuation">(</span>rootPath<span class="token punctuation">,</span>fileList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">EnvInitializer</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">String</span> rootPath<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fileList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rootPath <span class="token operator">=</span> <span class="token class-name">FileScanner</span><span class="token punctuation">.</span><span class="token function">getRealRootPath</span><span class="token punctuation">(</span>rootPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> fullPath <span class="token operator">:</span> fileList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> shortName <span class="token operator">=</span> fullPath<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>rootPath<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">FileScanner</span><span class="token punctuation">.</span><span class="token constant">TYPE_CLASS</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> packageFileName<span class="token operator">=</span>shortName<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">Matcher</span><span class="token punctuation">.</span><span class="token function">quoteReplacement</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;\\\\.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>packageFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                        <span class="token operator">||</span> clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                        <span class="token operator">||</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token class-name">VariablePool</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>真正实现文件扫描功能是调用的<code>FileScanner</code>，它的实现我们后面具体再说，在功能上它能够根据文件后缀名扫描某一目录下的全部文件，这里首先扫描出了<code>target</code>目录下全部以<code>.class</code>结尾的文件：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56ba16ff735745f785e3b3af251419d8~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>扫描到全部<code>class</code>文件后，就可以利用类的全限定名获取到类的<code>Class</code>对象，下一步是调用<code>doFilter</code>方法对类进行过滤。这里我们暂时仅考虑通过<code>@Value</code>注解的方式注入配置文件中属性值的方式，那么下一个问题来了，什么类中的<code>@Value</code>注解会生效呢？答案是通过<code>@Component</code>、<code>@Controller</code>、<code>@Service</code>这些注解交给spring容器管理的类。</p><p>综上，我们通过这些注解再次进行过滤出符合条件的类，找到后交给<code>VariablePool</code>对变量进行处理。</p><h3 id="_2、filescanner" tabindex="-1"><a class="header-anchor" href="#_2、filescanner" aria-hidden="true">#</a> 2、FileScanner</h3><p><code>FileScanner</code>是扫描文件的工具类，它可以根据文件后缀名筛选出需要的某个类型的文件，除了在<code>ScanRunner</code>中用它扫描了class文件外，在后面的逻辑中还会用它扫描yml文件。下面，看一下<code>FileScanner</code>中实现的文件扫描的具体代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileScanner</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TYPE_CLASS</span><span class="token operator">=</span><span class="token string">&quot;.class&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TYPE_YML</span><span class="token operator">=</span><span class="token string">&quot;.yml&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">findFileByType</span><span class="token punctuation">(</span><span class="token class-name">String</span> rootPath<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fileList<span class="token punctuation">,</span><span class="token class-name">String</span> fileType<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileList<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            fileList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">File</span> rootFile<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>rootPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rootFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">addFile</span><span class="token punctuation">(</span>rootFile<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fileList<span class="token punctuation">,</span>fileType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> subFileList <span class="token operator">=</span> rootFile<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> file <span class="token operator">:</span> subFileList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> subFilePath<span class="token operator">=</span>rootPath <span class="token operator">+</span> <span class="token string">&quot;\\\\&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">;</span>
                <span class="token class-name">File</span> subFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>subFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">addFile</span><span class="token punctuation">(</span>subFile<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fileList<span class="token punctuation">,</span>fileType<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    <span class="token function">findFileByType</span><span class="token punctuation">(</span>subFilePath<span class="token punctuation">,</span>fileList<span class="token punctuation">,</span>fileType<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> fileList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">,</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fileList<span class="token punctuation">,</span><span class="token class-name">String</span> fileType<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>fileType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            fileList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getRealRootPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> rootPath<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;os.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Windows&quot;</span><span class="token punctuation">)</span>
                <span class="token operator">&amp;&amp;</span> rootPath<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            rootPath <span class="token operator">=</span> rootPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rootPath <span class="token operator">=</span> rootPath<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Matcher</span><span class="token punctuation">.</span><span class="token function">quoteReplacement</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> rootPath<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查找文件的逻辑很简单，就是在给定的根目录<code>rootPath</code>下，循环遍历每一个目录，对找到的文件再进行后缀名的比对，如果符合条件就加到返回的文件名列表中。</p><p>至于下面的这个<code>getRealRootPath</code>方法，是因为在windows环境下，获取到项目的运行目录是这样的：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">/F</span><span class="token punctuation">:</span><span class="token value attr-value">/Workspace/hermit-purple-config/target/classes/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而class文件名是这样的：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">F</span><span class="token punctuation">:</span><span class="token value attr-value">\\Workspace\\hermit-purple-config\\target\\classes\\com\\cn\\hermimt\\purple\\test\\service\\UserService.class</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想要获取一个类的全限定名，那么首先要去掉运行目录，再把文件名中的反斜杠<code>\\</code>替换成点<code>.</code>，这里就是为了删掉文件名中的运行路径提前做好准备。</p><h3 id="_3、variablepool" tabindex="-1"><a class="header-anchor" href="#_3、variablepool" aria-hidden="true">#</a> 3、VariablePool</h3><p>回到上面的主流程中，每个在<code>ScanRunner</code>中扫描出的带有<code>@Component</code>、<code>@Controller</code>、<code>@Service</code>注解的<code>Class</code>，都会交给<code>VariablePool</code>进行处理。顾名思义，<code>VariablePool</code>就是变量池的意思，下面会用这个容器封装所有带<code>@Value</code>注解的属性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VariablePool</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> pool<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> regex<span class="token operator">=</span><span class="token string">&quot;^(\\\\$\\\\{)(.)+(\\\\})$&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> pattern<span class="token punctuation">;</span>
    <span class="token keyword">static</span><span class="token punctuation">{</span>
        pattern<span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Class</span> clazz<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">Value</span> annotation <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> annoValue <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>annoValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>

                annoValue<span class="token operator">=</span>annoValue<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;\${&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                annoValue<span class="token operator">=</span>annoValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>annoValue<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> clazzMap <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>annoValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                clazzMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                pool<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>annoValue<span class="token punctuation">,</span>clazzMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pool<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单说一下这块代码的设计思路：</p><ul><li>通过反射拿到<code>Class</code>对象中所有的属性，并判断属性是否加了<code>@Value</code>注解</li><li><code>@Value</code>如果要注入配置文件中的值，一定要符合<code>\${xxx}</code>的格式（这里先暂时不考虑<code>\${xxx:defaultValue}</code>这种设置了默认值的格式），所以需要使用正则表达式验证是否符合，并校验通过后去掉开头的<code>\${</code>和结尾的<code>}</code>，获取真正对应的配置文件中的字段</li><li><code>VariablePool</code>中声明了一个静态HashMap，用于存放所有<strong>配置文件中属性-类-类中属性</strong>的映射关系，接下来就要把这个关系存放到这个<code>pool</code>中</li></ul><p>简单来说，变量池就是下面这样的结构：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/adc54141428f40edb2ad7fafafe94b97~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里如果不好理解的话可以看看例子，我们引入两个测试<code>Service</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${person.name}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${person.age}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDeptService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${person.name}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> pname<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在所有<code>Class</code>执行完<code>add</code>方法后，变量池<code>pool</code>中的数据是这样的：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e681c44bb6aa41ed9e8f9110af3001a1~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到在<code>pool</code>中，<code>person.name</code>对应的内层Map中包含了两条数据，分别是<code>UserService</code>中的<code>name</code>字段，以及<code>UserDeptService</code>中的<code>pname</code>字段。</p><h3 id="_4、envinitializer" tabindex="-1"><a class="header-anchor" href="#_4、envinitializer" aria-hidden="true">#</a> 4、EnvInitializer</h3><p>在<code>VariablePool</code>封装完所有变量数据后，<code>ScanRunner</code>会调用<code>EnvInitializer</code>的<code>init</code>方法，开始对yml文件进行解析，完成配置中心环境的初始化。其实说白了，这个环境就是一个静态的HashMap，<code>key</code>是属性名，<code>value</code>就是属性的值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnvInitializer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> envMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> rootPath <span class="token operator">=</span> <span class="token class-name">EnvInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fileList <span class="token operator">=</span> <span class="token class-name">FileScanner</span><span class="token punctuation">.</span><span class="token function">findFileByType</span><span class="token punctuation">(</span>rootPath<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">FileScanner</span><span class="token punctuation">.</span><span class="token constant">TYPE_YML</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ymlFilePath <span class="token operator">:</span> fileList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            rootPath <span class="token operator">=</span> <span class="token class-name">FileScanner</span><span class="token punctuation">.</span><span class="token function">getRealRootPath</span><span class="token punctuation">(</span>rootPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ymlFilePath <span class="token operator">=</span> ymlFilePath<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>rootPath<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">YamlMapFactoryBean</span> yamlMapFb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YamlMapFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            yamlMapFb<span class="token punctuation">.</span><span class="token function">setResources</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span>ymlFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> yamlMapFb<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">YamlConverter</span><span class="token punctuation">.</span><span class="token function">doConvert</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>envMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setEnvMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> envMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">EnvInitializer</span><span class="token punctuation">.</span>envMap <span class="token operator">=</span> envMap<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getEnvMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> envMap<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先还是使用<code>FileScanner</code>扫描根目录下所有的<code>.yml</code>结尾的文件，并使用spring自带的<code>YamlMapFactoryBean</code>进行yml文件的解析。但是这里有一个问题，所有yml文件解析后都会生成一个独立的Map，需要进行Map的合并，生成一份配置信息表。至于这一块具体的操作，都交给了下面的<code>YamlConverter</code>进行处理。</p><p>我们先进行一下演示，准备两个yml文件，配置文件一：<code>application.yml</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> hermit<span class="token punctuation">-</span>purple
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6879</span>
<span class="token key atrule">person</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> Hydra
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件二：<code>config/test.yml</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">my</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> John
  <span class="token key atrule">friend</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> Jay
    <span class="token key atrule">sex</span><span class="token punctuation">:</span> male
<span class="token key atrule">run</span><span class="token punctuation">:</span> yeah
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先来看一看环境完成初始化后，生成的数据格式是这样的：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08b247919b8c46ff8f037a5a0f1fc1f3~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5、yamlconverter" tabindex="-1"><a class="header-anchor" href="#_5、yamlconverter" aria-hidden="true">#</a> 5、YamlConverter</h3><p><code>YamlConverter</code>主要实现的方法有三个：</p><ul><li><code>doConvert()</code>：将<code>EnvInitializer</code>中提供的多个Map合并成一个单层Map</li><li><code>monoToMultiLayer()</code>：将单层Map转换为多层Map（为了生成yml格式字符串）</li><li><code>convert()</code>：yml格式的字符串解析为Map（为了判断属性是否发生变化）</li></ul><p>由于后面两个功能暂时还没有涉及，我们先看第一段代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YamlConverter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doConvert</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span><span class="token class-name">String</span> parentKey<span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> propertiesMap<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> prefix<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>parentKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">&quot;&quot;</span><span class="token operator">:</span>parentKey<span class="token operator">+</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">doConvert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span>value<span class="token punctuation">,</span>prefix<span class="token operator">+</span>key<span class="token punctuation">,</span>propertiesMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                propertiesMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefix<span class="token operator">+</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">//...</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>逻辑也很简单，通过循环遍历的方式，将多个Map最终都合并到了目的<code>envMap</code>中，并且如果遇到多层Map嵌套的情况，那么将多层Map的key通过点<code>.</code>进行了连接，最终得到了上面那张图中样式的单层Map。</p><p>其余两个方法，我们在下面使用到的场景再说。</p><h3 id="_6、configcontroller" tabindex="-1"><a class="header-anchor" href="#_6、configcontroller" aria-hidden="true">#</a> 6、ConfigController</h3><p><code>ConfigController</code>作为控制器，用于和前端进行交互，只有两个接口<code>save</code>和<code>get</code>，下面分别介绍。</p><h4 id="get" tabindex="-1"><a class="header-anchor" href="#get" aria-hidden="true">#</a> get</h4><p>前端页面在开启时会调用<code>ConfigController</code>中的<code>get</code>接口，填充到<code>textArea</code>中。先看一下<code>get</code>方法的实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">YAMLFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> yamlContent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> envMap <span class="token operator">=</span> <span class="token class-name">EnvInitializer</span><span class="token punctuation">.</span><span class="token function">getEnvMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">YamlConverter</span><span class="token punctuation">.</span><span class="token function">monoToMultiLayer</span><span class="token punctuation">(</span>envMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        yamlContent <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> yamlContent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之前在项目启动时，就已经把配置文件属性封装到了<code>EnvInitializer</code>的<code>envMap</code>中，并且这个<code>envMap</code>是一个单层的Map，不存在嵌套关系。但是我们这里要使用<code>jackson</code>生成标准格式的yml文档，这种格式不符合要求，需要将它还原成一个具有层级关系的多层Map，就需要调用<code>YamlConverter</code>的<code>monoToMultiLayer()</code>方法。</p><p><code>monoToMultiLayer()</code>方法的代码有点长，就不贴在这里了，主要是根据key中的<code>.</code>进行拆分并不断创建子级的Map，转换完成后得到的多层Map数据如下：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f7aa42f487943e580a2dffac60d644b~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在获得这种格式后的Map后，就可以调用<code>jackson</code>中的方法将Map转换为yml格式的字符串传递给前端了，看一下处理完成后返回给前端的字符串：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5772ac2a304c44b5a4ebf862b689b045~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="save" tabindex="-1"><a class="header-anchor" href="#save" aria-hidden="true">#</a> save</h4><p>在前端页面修改了yml内容后点击保存时，会调用<code>save</code>方法保存并更新配置，方法的实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;save&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> ymlContent <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> newValue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;yml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PropertyTrigger</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>ymlContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在拿到前端传过来的yml字符串后，调用<code>PropertyTrigger</code>的<code>change</code>方法，实现后续的更改逻辑。</p><h3 id="_7、propertytrigger" tabindex="-1"><a class="header-anchor" href="#_7、propertytrigger" aria-hidden="true">#</a> 7、PropertyTrigger</h3><p>在调用<code>change</code>方法后，主要做的事情有两件：</p><ul><li>修改<code>EnvInitializer</code>中的环境<code>envMap</code>，用于前端页面刷新时返回新的数据，以及下一次属性改变时进行对比使用</li><li>修改bean中属性的值，这也是整个配置中心最重要的功能</li></ul><p>先看一下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertyTrigger</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> ymlContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> newMap <span class="token operator">=</span> <span class="token class-name">YamlConverter</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>ymlContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> oldMap <span class="token operator">=</span> <span class="token class-name">EnvInitializer</span><span class="token punctuation">.</span><span class="token function">getEnvMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        oldMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>key<span class="token operator">-&gt;</span>newMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>key<span class="token operator">-&gt;</span><span class="token operator">!</span>newMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>oldMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Object</span> newVal <span class="token operator">=</span> newMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    oldMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">doChange</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">EnvInitializer</span><span class="token punctuation">.</span><span class="token function">setEnvMap</span><span class="token punctuation">(</span>oldMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doChange</span><span class="token punctuation">(</span><span class="token class-name">String</span> propertyName<span class="token punctuation">,</span> <span class="token class-name">Object</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;newValue:&quot;</span><span class="token operator">+</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> pool <span class="token operator">=</span> <span class="token class-name">VariablePool</span><span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> classProMap <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        classProMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>clazzName<span class="token punctuation">,</span>realPropertyName<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token class-name">SpringContextUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>clazzName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Field</span> field <span class="token operator">=</span> clazzName<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>realPropertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面铺垫了那么多，其实就是为了实现这段代码中的功能，具体逻辑如下：</p><ul><li>调用<code>YamlConverter</code>的<code>convert</code>方法，将前端传来的yml格式字符串解析封装成单层Map，数据格式和<code>EnvInitializer</code>中的<code>envMap</code>相同</li><li>遍历旧的<code>envMap</code>，查看其中的key在新的Map中对应的属性值是否发生了改变，如果没有改变则不做之后的任何操作</li><li>如果发生改变，用新的值替换<code>envMap</code>中的旧值</li><li>通过属性名称，从<code>VariablePool</code>中拿到涉及改变的<code>Class</code>，以及类中的字段<code>Field</code>。并通过后面的<code>SpringContextUtil</code>中的方法获取到这个bean的实例对象，再通过反射改变字段的值</li><li>将修改后的Map写回<code>EnvInitializer</code>中的<code>envMap</code></li></ul><p>到这里，就实现了全部的功能。</p><h3 id="_8、springcontextutil" tabindex="-1"><a class="header-anchor" href="#_8、springcontextutil" aria-hidden="true">#</a> 8、SpringContextUtil</h3><p><code>SpringContextUtil</code>通过实现<code>ApplicationContextAware</code>接口获得了spring容器，而通过容器的<code>getBean()</code>方法就可以容易的拿到spring中的bean，方便进行后续的更改操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringContextUtil</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9、前端代码" tabindex="-1"><a class="header-anchor" href="#_9、前端代码" aria-hidden="true">#</a> 9、前端代码</h3><p>至于前端代码，就是一个非常简单的表单，代码的话可以移步<code>git</code>查看。</p><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后" aria-hidden="true">#</a> 最后</h2><p>到这里全部的代码介绍完了，最后做一个简要的总结吧，虽然通过这几个类能够实现一个简易版的配置中心功能，但是还有不少的缺陷，例如：</p><ul><li>没有处理<code>@ConfigurationProperties</code>注解</li><li>只处理了yml文件，没有处理properties文件</li><li>目前处理的bean都是基于<code>singleton</code>模式，如果作用域为<code>prototype</code>，也会存在问题</li><li>反射性能低，如果某个属性涉及的类很多会影响性能</li><li>目前只能代码嵌入到项目中使用，还不支持独立部署及远程注册功能</li><li>……</li></ul><p>总的来说，后续需要完善的点还有不少，真是感觉任重道远。</p><p>最后再聊聊项目的名称，为什么取名叫<code>hermit-purple</code>呢，来源是jojo中二乔的替身<strong>隐者之紫</strong>，感觉这个替身的能力和配置中心的感知功能还是蛮搭配的，所以就用了这个哈哈。</p><p>那么这次的分享就到这里，我是Hydra，我们下篇再见。</p>`,87),r=n("p",null,"项目git地址：",-1),d={href:"https://github.com/trunks2008/hermit-purple-config",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"大家如果对代码有建议或者好的idea，欢迎在后台留言或加我微信好友一起讨论。",-1);function m(b,g){const s=i("ExternalLinkIcon");return p(),t("div",null,[e(" more "),k,n("blockquote",null,[r,n("p",null,[n("a",d,[o("https://github.com/trunks2008/hermit-purple-config"),c(s)])]),v])])}const y=a(u,[["render",m],["__file","ConfigurationCenter.html.vue"]]);export{y as default};
