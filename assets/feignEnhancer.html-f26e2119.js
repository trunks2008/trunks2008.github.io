import{_ as p,W as o,X as c,$ as i,Y as n,a0 as s,a1 as e,Z as t,C as l}from"./framework-9e67db09.js";const u={},r=t(`<p>哈喽大家好啊，我是Hydra。</p><p>在平常的工作中，<code>OpenFeign</code>作为微服务间的调用组件使用的非常普遍，接口配合注解的调用方式突出一个简便，让我们能无需关注内部细节就能实现服务间的接口调用。</p><p>但是工作中用久了，发现Feign也有些使用起来麻烦的地方，下面先来看一个问题，再看看我们在工作中是如何解决，以达到简化Feign使用的目的。</p><h2 id="先看问题" tabindex="-1"><a class="header-anchor" href="#先看问题" aria-hidden="true">#</a> 先看问题</h2><p>在一个项目开发的过程中，我们通常会区分开发环境、测试环境和生产环境，如果有的项目要求更高的话，可能还会有个预生产环境。</p><p>开发环境作为和前端开发联调的环境，一般使用起来都比较随意，而我们在进行本地开发的时候，有时候也会将本地启动的微服务注册到注册中心nacos上，方便进行调试。</p><p>这样，注册中心的一个微服务可能就会拥有多个服务实例，就像下面这样：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4ad0bb960a44c61ac484a7f405429e9~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>眼尖的小伙伴肯定发现了，这两个实例的ip地址有一点不同。</p><p>线上环境现在一般使用容器化部署，通常都是由流水线工具打成镜像然后扔到docker中运行，因此我们去看一下服务在docker容器内的ip：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e2ab68f265940fcac3cfc516ef50e68~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，这就是注册到nacos上的服务地址之一，而列表中<code>192</code>开头的另一个ip，则是我们本地启动的服务的局域网地址。看一下下面这张图，就能对整个流程一目了然了。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f69fecbe08644d94941026dfa8256035~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>总结一下：</p><ul><li>两个service都是通过宿主机的ip和port，把自己的信息注册到nacos上</li><li>线上环境的service注册时使用docker内部ip地址</li><li>本地的service注册时使用本地局域网地址</li></ul><p>那么这时候问题就来了，当我本地再启动一个serviceB，通过<code>FeignClient</code>来调用serviceA中的接口时，因为Feign本身的负载均衡，就可能把请求负载均衡到两个不同的serviceA实例。</p><p>如果这个调用请求被负载均衡到本地serviceA的话，那么没什么问题，两个服务都在同一个<code>192.168</code>网段内，可以正常访问。但是如果负载均衡请求到运行在docker内的serviceA的话，那么问题来了，因为网络不通，所以会请求失败：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acda136f83b54cbe99a660fe92a24b8b~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>说白了，就是本地的<code>192.168</code>和docker内的虚拟网段<code>172.17</code>属于纯二层的两个不同网段，不能互访，所以无法直接调用。</p><p>那么，如果想在调试时把请求稳定打到本地服务的话，有一个办法，就是指定在<code>FeignClient</code>中添加<code>url</code>参数，指定调用的地址：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;hydra-service&quot;</span><span class="token punctuation">,</span>url <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:8088/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ClientA</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test/get&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这么一来也会带来点问题：</p><ul><li>代码上线时需要再把注解中的<code>url</code>删掉，还要再次修改代码，如果忘了的话会引起线上问题</li><li>如果测试的<code>FeignClient</code>很多的话，每个都需要配置<code>url</code>，修改起来很麻烦</li></ul><p>那么，有什么办法进行改进呢？为了解决这个问题，我们还是得从Feign的原理说起。</p><h2 id="feign原理" tabindex="-1"><a class="header-anchor" href="#feign原理" aria-hidden="true">#</a> Feign原理</h2>`,25),d={href:"https://mp.weixin.qq.com/s/FTQMCTOrvUMfK82iBf5fgA",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>简单来说，就是项目中加的<code>@EnableFeignClients</code>这个注解，实现时有一行很重要的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">FeignClientsRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个类实现了<code>ImportBeanDefinitionRegistrar</code>接口，在这个接口的<code>registerBeanDefinitions</code>方法中，可以手动创建<code>BeanDefinition</code>并注册，之后spring会根据<code>BeanDefinition</code>实例化生成bean，并放入容器中。</p><p>Feign就是通过这种方式，扫描添加了<code>@FeignClient</code>注解的接口，然后一步步生成代理对象，具体流程可以看一下下面这张图：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26a423f975094d2fa3aa639c39bd9d5e~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>后续在请求时，通过代理对象的<code>FeignInvocationHandler</code>进行拦截，并根据对应方法进行处理器的分发，完成后续的http请求操作。</p><h2 id="importbeandefinitionregistrar" tabindex="-1"><a class="header-anchor" href="#importbeandefinitionregistrar" aria-hidden="true">#</a> ImportBeanDefinitionRegistrar</h2><p>上面提到的<code>ImportBeanDefinitionRegistrar</code>，在整个创建<code>FeignClient</code>的代理过程中非常重要， 所以我们先写一个简单的例子看一下它的用法。先定义一个实体类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>BeanDefinitionBuilder</code>，向这个实体类的构造方法中传入具体值，最后生成一个<code>BeanDefinition</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanDefinitionRegistrar</span>
        <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span>
                                        <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BeanDefinitionBuilder</span> builder
                <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">addConstructorArgValue</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">addConstructorArgValue</span><span class="token punctuation">(</span><span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">AbstractBeanDefinition</span> beanDefinition <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>registerBeanDefinitions</code>方法的具体调用时间是在之后的<code>ConfigurationClassPostProcessor</code>执行<code>postProcessBeanDefinitionRegistry</code>方法时，而<code>registerBeanDefinition</code>方法则会将<code>BeanDefinition</code>放进一个map中，后续根据它实例化bean。</p><p>在配置类上通过<code>@Import</code>将其引入：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">MyBeanDefinitionRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注入这个<code>User</code>测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果打印，说明我们通过自定义<code>BeanDefinition</code>的方式成功手动创建了一个bean并放入了spring容器中：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">User(id</span><span class="token punctuation">=</span><span class="token value attr-value">1, name=Hydra)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>好了，准备工作铺垫到这结束，下面开始正式的改造工作。</p><h2 id="改造" tabindex="-1"><a class="header-anchor" href="#改造" aria-hidden="true">#</a> 改造</h2><p>到这里先总结一下，我们纠结的点就是本地环境需要<code>FeignClient</code>中配置<code>url</code>，但线上环境不需要，并且我们又不想来回修改代码。</p><p>除了像源码中那样生成动态代理以及拦截方法，官方文档中还给我们提供了一个手动创建FeignClient的方法。</p>`,22),v={href:"https://docs.spring.io/spring-cloud-openfeign/docs/2.2.9.RELEASE/reference/html/#creating-feign-clients-manually",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>简单来说，就是我们可以像下面这样，通过Feign的Builder API来手动创建一个Feign客户端。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1f16639613f4623820171e321c34b35~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>简单看一下，这个过程中还需要配置<code>Client</code>、<code>Encoder</code>、<code>Decoder</code>、<code>Contract</code>、<code>RequestInterceptor</code>等内容。</p><ul><li><code>Client</code>：实际http请求的发起者，如果不涉及负载均衡可以使用简单的<code>Client.Default</code>，用到负载均衡则可以使用<code>LoadBalancerFeignClient</code>，前面也说了，<code>LoadBalancerFeignClient</code>中的<code>delegate</code>其实使用的也是<code>Client.Default</code></li><li><code>Encoder</code>和<code>Decoder</code>：Feign的编解码器，在spring项目中使用对应的<code>SpringEncoder</code>和<code>ResponseEntityDecoder</code>，这个过程中我们借用<code>GsonHttpMessageConverter</code>作为消息转换器来解析json</li><li><code>RequestInterceptor</code>：Feign的拦截器，一般业务用途比较多，比如添加修改header信息等，这里用不到可以不配</li><li><code>Contract</code>：字面意思是合约，它的作用是将我们传入的接口进行解析验证，看注解的使用是否符合规范，然后将关于http的元数据抽取成结果并返回。如果我们使用<code>RequestMapping</code>、<code>PostMapping</code>、<code>GetMapping</code>之类注解的话，那么对应使用的是<code>SpringMvcContract</code></li></ul><p>其实这里刚需的就只有<code>Contract</code>这一个，其他都是可选的配置项。我们写一个配置类，把这些需要的东西都注入进去：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">LocalFeignProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">LocalFeignClientRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;feign.local.enable&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignAutoConfiguration</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;feign local route started&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Primary</span>
    <span class="token keyword">public</span> <span class="token class-name">Contract</span> <span class="token function">contract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringMvcContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;defaultClient&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Client</span> <span class="token function">defaultClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Client<span class="token punctuation">.</span>Default</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;ribbonClient&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Client</span> <span class="token function">ribbonClient</span><span class="token punctuation">(</span><span class="token class-name">CachingSpringLoadBalancerFactory</span> cachingFactory<span class="token punctuation">,</span>
                               <span class="token class-name">SpringClientFactory</span> clientFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadBalancerFeignClient</span><span class="token punctuation">(</span><span class="token function">defaultClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cachingFactory<span class="token punctuation">,</span>
                clientFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Decoder</span> <span class="token function">decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">HttpMessageConverter</span> httpMessageConverter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverters</span><span class="token punctuation">&gt;</span></span> messageConverters<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">HttpMessageConverters</span><span class="token punctuation">(</span>httpMessageConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SpringDecoder</span> springDecoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringDecoder</span><span class="token punctuation">(</span>messageConverters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntityDecoder</span><span class="token punctuation">(</span>springDecoder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Encoder</span> <span class="token function">encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">HttpMessageConverter</span> httpMessageConverter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverters</span><span class="token punctuation">&gt;</span></span> messageConverters<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">HttpMessageConverters</span><span class="token punctuation">(</span>httpMessageConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringEncoder</span><span class="token punctuation">(</span>messageConverters<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个配置类上，还有三行注解，我们一点点解释。</p><p>首先是引入的配置类<code>LocalFeignProperties</code>，里面有三个属性，分别是是否开启本地路由的开关、扫描FeignClient接口的包名，以及我们要做的本地路由映射关系，<code>addressMapping</code>中存的是服务名和对应的url地址：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;feign.local&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalFeignProperties</span> <span class="token punctuation">{</span>
    <span class="token comment">// 是否开启本地路由</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> enable<span class="token punctuation">;</span>

    <span class="token comment">//扫描FeignClient的包名</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> basePackage<span class="token punctuation">;</span>

    <span class="token comment">//路由地址映射</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> addressMapping<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这行注解则表示只有当配置文件中<code>feign.local.enable</code>这个属性为<code>true</code>时，才使当前配置文件生效：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;feign.local.enable&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，就是我们重中之重的<code>LocalFeignClientRegistrar</code>了，我们还是按照官方通过<code>ImportBeanDefinitionRegistrar</code>接口构建<code>BeanDefinition</code>然后注册的思路来实现。</p><p>并且，<code>FeignClientsRegistrar</code>的源码中已经实现好了很多基础的功能，比如扫扫描包、获取<code>FeignClient</code>的<code>name</code>、<code>contextId</code>、<code>url</code>等等，所以需要改动的地方非常少，可以放心的大抄特超它的代码。</p><p>先创建<code>LocalFeignClientRegistrar</code>，并注入需要用到的<code>ResourceLoader</code>、<code>BeanFactory</code>、<code>Environment</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalFeignClientRegistrar</span> <span class="token keyword">implements</span>
        <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">,</span> <span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">,</span>
        <span class="token class-name">EnvironmentAware</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token operator">=</span>resourceLoader<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token operator">=</span>environment<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	
	<span class="token comment">//先省略具体功能代码...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后看一下创建<code>BeanDefinition</code>前的工作，这一部分主要完成了包的扫描和检测<code>@FeignClient</code>注解是否被添加在接口上的测试。下面这段代码基本上是照搬源码，除了改动一下扫描包的路径，使用我们自己在配置文件中配置的包名。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ClassPathScanningCandidateComponentProvider</span> scanner <span class="token operator">=</span> <span class="token class-name">ComponentScanner</span><span class="token punctuation">.</span><span class="token function">getScanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    scanner<span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span>resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">AnnotationTypeFilter</span> annotationTypeFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationTypeFilter</span><span class="token punctuation">(</span><span class="token class-name">FeignClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scanner<span class="token punctuation">.</span><span class="token function">addIncludeFilter</span><span class="token punctuation">(</span>annotationTypeFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> basePackage <span class="token operator">=</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;feign.local.basePackage&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;begin to scan {}&quot;</span><span class="token punctuation">,</span>basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">&gt;</span></span> candidateComponents <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">findCandidateComponents</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span> candidateComponent <span class="token operator">:</span> candidateComponents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>candidateComponent <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>candidateComponent<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// verify annotated class is an interface</span>
            <span class="token class-name">AnnotatedBeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> candidateComponent<span class="token punctuation">;</span>
            <span class="token class-name">AnnotationMetadata</span> annotationMetadata <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;@FeignClient can only be specified on an interface&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes <span class="token operator">=</span> annotationMetadata
                    <span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">FeignClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">FeignCommonUtil</span><span class="token punctuation">.</span><span class="token function">getClientName</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">registerFeignClient</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来创建<code>BeanDefinition</code>并注册，Feign的源码中是使用的<code>FeignClientFactoryBean</code>创建代理对象，这里我们就不需要了，直接替换成使用<code>Feign.builder</code>创建。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerFeignClient</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">,</span>
                                 <span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> className <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">resolveClassName</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ConfigurableBeanFactory</span> beanFactory <span class="token operator">=</span> registry <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableBeanFactory</span>
            <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">)</span> registry <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> contextId <span class="token operator">=</span> <span class="token class-name">FeignCommonUtil</span><span class="token punctuation">.</span><span class="token function">getContextId</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">FeignCommonUtil</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">BeanDefinitionBuilder</span> definition <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span>
            <span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">Contract</span> contract <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Contract</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Client</span> defaultClient <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Client</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;defaultClient&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Client</span> ribbonClient <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Client</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;ribbonClient&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Encoder</span> encoder <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Encoder</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Decoder</span> decoder <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Decoder</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">LocalFeignProperties</span> properties <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">LocalFeignProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> addressMapping <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getAddressMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Feign<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token class-name">Feign</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">encoder</span><span class="token punctuation">(</span>encoder<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">decoder</span><span class="token punctuation">(</span>decoder<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">contract</span><span class="token punctuation">(</span>contract<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">String</span> serviceUrl <span class="token operator">=</span> addressMapping<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> originUrl <span class="token operator">=</span> <span class="token class-name">FeignCommonUtil</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> environment<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Object</span> target<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>serviceUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    target <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>defaultClient<span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> serviceUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>originUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    target <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>defaultClient<span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span>originUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                    target <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>ribbonClient<span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span><span class="token string">&quot;http://&quot;</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">return</span> target<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    definition<span class="token punctuation">.</span><span class="token function">setAutowireMode</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">.</span><span class="token constant">AUTOWIRE_BY_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    definition<span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FeignCommonUtil</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">AbstractBeanDefinition</span> beanDefinition <span class="token operator">=</span> definition<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    beanDefinition<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">FactoryBean</span><span class="token punctuation">.</span><span class="token constant">OBJECT_TYPE_ATTRIBUTE</span><span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// has a default, won&#39;t be null</span>
    <span class="token keyword">boolean</span> primary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;primary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    beanDefinition<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span>primary<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> qualifiers <span class="token operator">=</span> <span class="token class-name">FeignCommonUtil</span><span class="token punctuation">.</span><span class="token function">getQualifiers</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>qualifiers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        qualifiers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> contextId <span class="token operator">+</span> <span class="token string">&quot;FeignClient&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">BeanDefinitionHolder</span> holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> className<span class="token punctuation">,</span>
            qualifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanDefinitionReaderUtils</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>holder<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个过程中主要做了这么几件事：</p><ul><li>通过<code>beanFactory</code>拿到了我们在前面创建的<code>Client</code>、<code>Encoder</code>、<code>Decoder</code>、<code>Contract</code>，用来构建<code>Feign.Builder</code></li><li>通过注入配置类，通过<code>addressMapping</code>拿到配置文件中服务对应的调用<code>url</code></li><li>通过<code>target</code>方法替换要请求的<code>url</code>，如果配置文件中存在则优先使用配置文件中<code>url</code>，否则使用<code>@FeignClient</code>注解中配置的<code>url</code>，如果都没有则使用服务名通过<code>LoadBalancerFeignClient</code>访问</li></ul><p>在<code>resources/META-INF</code>目录下创建<code>spring.factories</code>文件，通过spi注册我们的自动配置类：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\\
  com.feign.local.config.FeignAutoConfiguration</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，本地打包即可：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn clean <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>引入我们在上面打好的包，由于包中已经包含了<code>spring-cloud-starter-openfeign</code>，所以就不需要再额外引<code>feign</code>的包了：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.cn.hydra<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-local-enhancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在配置文件中添加配置信息，启用组件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">local</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">basePackage</span><span class="token punctuation">:</span> com.service
    <span class="token key atrule">addressMapping</span><span class="token punctuation">:</span>
      <span class="token key atrule">hydra-service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">8088</span>
      <span class="token key atrule">trunks-service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">8099</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个<code>FeignClient</code>接口，注解的<code>url</code>中我们可以随便写一个地址，可以用来测试之后是否会被配置文件中的服务地址覆盖：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;hydra-service&quot;</span><span class="token punctuation">,</span>
	contextId <span class="token operator">=</span> <span class="token string">&quot;hydra-serviceA&quot;</span><span class="token punctuation">,</span>
	url <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:8099/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ClientA</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test/get&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test/user&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动服务，过程中可以看见了执行扫描包的操作：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0dcd508e4144f23b56a06f876c451cd~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在替换<code>url</code>过程中添加一个断点，可以看到即使在注解中配置了<code>url</code>，也会优先被配置文件中的服务<code>url</code>覆盖：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82f1fa4f20dc4aecb3492330a802503c~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用接口进行测试，可以看到使用上面的代理对象进行了访问并成功返回了结果：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4a7245da0474346a110668b1a0ad811~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果项目需要发布正式环境，只需要将配置<code>feign.local.enable</code>改为<code>false</code>或删掉，并在项目中添加Feign原始的<code>@EnableFeignClients</code>即可。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文提供了一个在本地开发过程中简化Feign调用的思路，相比之前需要麻烦的修改<code>FeignClient</code>中的<code>url</code>而言，能够节省不少的无效劳动，并且通过这个过程，也可以帮助大家了解我们平常使用的这些组件是怎么与spring结合在一起的，熟悉spring的扩展点。</p><p>组件代码已提交到我的github，有需要的小伙伴们可以自取，码字不易，也欢迎大家点个star~</p>`,42),g={href:"https://github.com/trunks2008/feign-local-enhancer",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"那么，这次的分享就到这里，我是Hydra，我们下篇再见。",-1);function f(y,C){const a=l("ExternalLinkIcon");return o(),c("div",null,[i(" more "),r,n("p",null,[s("Feign的实现和工作原理，我以前写过一篇简单的源码分析，大家可以简单花个几分钟先铺垫一下，"),n("a",d,[s("Feign核心源码解析"),e(a)]),s("。明白了原理，后面理解起来更方便一些。")]),k,n("blockquote",null,[n("p",null,[n("a",v,[s("https://docs.spring.io/spring-cloud-openfeign/docs/2.2.9.RELEASE/reference/html/#creating-feign-clients-manually"),e(a)])])]),m,n("blockquote",null,[n("p",null,[n("a",g,[s("https://github.com/trunks2008/feign-local-enhancer"),e(a)])])]),b])}const w=p(u,[["render",f],["__file","feignEnhancer.html.vue"]]);export{w as default};
