import{_ as n,W as s,X as a,$ as e,Z as t}from"./framework-9e67db09.js";const p={},i=t(`<p>在Redis主从复制架构这篇文章中我们分析了主从复制的特点，其中一个问题就是主机宕机后需要手动调整，修改从机为主机，不仅不利于迅速恢复生产场景，还会增加人力成本。哨兵模式的出现是就是为了解决我们主从复制模式中需要我们人为操作的东西变为自动版，并且它比人为要更及时。这篇文章我们就来讲讲如何通过哨兵模式，迅速实现自动故障转移。</p><h2 id="一、哨兵主要功能" tabindex="-1"><a class="header-anchor" href="#一、哨兵主要功能" aria-hidden="true">#</a> 一、哨兵主要功能</h2><p>Redis中的哨兵具有以下的功能：</p><ul><li>监控（<code>Monitoring</code>）：哨兵会不断地检查主节点和从节点是否运作正常。</li><li>自动故障转移（<code>Automatic Failover</code>）：当主节点不能正常工作时，哨兵会开始自动故障转移操作，它会将失效主节点的其中一个从节点升级为新的主节点，并让其他从节点改为复制新的主节点。</li><li>配置提供者（<code>Configuration Provider</code>）：客户端在初始化时，通过连接哨兵来获得当前Redis服务的主节点地址。</li><li>通知（<code>Notification</code>）：哨兵可以将故障转移的结果发送给客户端。</li></ul><p>其中，监控和自动故障转移功能，使得哨兵可以及时发现主节点故障并完成转移；而配置提供者和通知功能，则需要在与客户端的交互中才能体现。</p><h2 id="二、哨兵模式架构" tabindex="-1"><a class="header-anchor" href="#二、哨兵模式架构" aria-hidden="true">#</a> 二、哨兵模式架构</h2><p>哨兵模式下，可以将节点类型分为数据节点和哨兵节点：</p><ul><li>数据节点：主从架构中的主节点和从节点都是数据节点。</li><li>哨兵节点：哨兵系统由一个或多个哨兵节点组成，哨兵节点是特殊的Redis节点，不存储数据。</li></ul><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b34665c3b354cec84e92ff4f64c5042~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在上图的架构中，除使用1主2从外，还额外使用了3个哨兵来监视集群状况。</p><h2 id="三、搭建哨兵模式" tabindex="-1"><a class="header-anchor" href="#三、搭建哨兵模式" aria-hidden="true">#</a> 三、搭建哨兵模式</h2><p>1、部署主从节点</p><p>哨兵系统中的主从节点，与普通的主从节点配置是一样的，并不需要做任何额外配置，继续使用上篇文章的配置即可。注意使用哨兵模式下，一定要开启<code>materauth</code>配置密码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>masterauth <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、部署哨兵节点</p><p>拷贝安装目录下的配置文件<code>sentinel.conf</code>到自己新建的<code>sentinel</code>目录下，并重命名为<code>sentinel28000.conf</code>，以便和之后的哨兵通过端口进行区分。</p><p>修改配置文件，首先修改通用配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0
protected-mode no
port <span class="token number">28000</span>
daemonize <span class="token function">yes</span>
pidfile /var/run/redis-sentinel28000.pid
logfile <span class="token string">&quot;sentinel28000.log&quot;</span>
<span class="token function">dir</span> /tmp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改哨兵核心配置，如果只配置一台哨兵，只需要修改以下配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sentinel monitor mymaster <span class="token number">127.0</span>.0.1 <span class="token number">8000</span> <span class="token number">2</span>
sentinel auth-pass mymaster <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>看一下官方注释中的格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sentinel monitor <span class="token operator">&lt;</span>master-name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>ip<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>redis-port<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>quorum<span class="token operator">&gt;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>master-name</code>指定了主节点名称</li><li><code>ip</code>和<code>redis-port</code>指定了主节点地址</li><li><code>quorum</code>是判断主节点客观下线的哨兵数量阈值：当判定主节点下线的哨兵数量达到<code>quorum</code>时，对主节点进行客观下线。建议取值为哨兵数量的一半加1</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sentinel auth-pass &lt;master-name&gt; &lt;password&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当在Redis实例中开启了<code>requirepass foobared</code> 授权密码后，所有连接Redis实例的客户端都要提供密码。设置哨兵<code>sentinel </code>连接主从的密码，注意必须为主从设置一样的验证密码。</p><p>其他配置参数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sentinel down-after-milliseconds mymaster 30000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该参数与主观下线的判断有关：哨兵使用<code>ping</code>命令对其他节点进行心跳检测，如果其他节点超过<code>down-after-milliseconds</code>配置的时间没有回复，哨兵就会将其进行主观下线。该配置对主节点、从节点和哨兵节点的主观下线判定都有效。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sentinel parallel-syncs mymaster 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该参数与故障转移之后从节点的复制有关：它规定了每次向新的主节点发起复制操作的从节点个数。</p><p>例如，假设主节点切换完成之后，有3个从节点要向新的主节点发起复制：</p><ul><li>如果parallel-syncs=1，则从节点会一个一个开始复制</li><li>如果parallel-syncs=3，则3个从节点会一起开始复制</li></ul><p><code>parallel-syncs</code>取值越大，从节点完成复制的时间越快，但是对主节点的网络负载、硬盘负载造成的压力也越大，应根据实际情况设置。</p><p>这里我们使用3台哨兵，因此复制配置文件<code>sentinel28001.conf</code>和<code>sentinel28002.conf</code>，并批量替换其中的端口号为28001和28002。</p><p>3、启动哨兵节点</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>../redis-5.0.4/src/redis-sentinel sentinel28000.conf
../redis-5.0.4/src/redis-sentinel sentinel28001.conf
../redis-5.0.4/src/redis-sentinel sentinel28002.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，也可以使用下面的命令启动，效果相同：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>../redis-5.0.4/src/redis-server sentinel28002.conf --sentinel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看运行进程：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1eb90c32d4e400886b90d99d9bdc392~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>可以看出，现在主从运行3台Redis实例，并配置了3台哨兵。</p><p>4、使用Jedis客户端进行测试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisSentinelTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;172.20.5.179:28000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;172.20.5.179:28001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;172.20.5.179:28002&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JedisSentinelPool</span> jedisSentinelPool<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JedisSentinelPool</span><span class="token punctuation">(</span><span class="token string">&quot;mymaster&quot;</span><span class="token punctuation">,</span>set<span class="token punctuation">,</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Jedis</span> jedis<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                jedis <span class="token operator">=</span> jedisSentinelPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;k&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">,</span> <span class="token string">&quot;v&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;k&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>jedis<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在客户端写数据过程中，使用<code>kill</code>命令杀死主机，会存在短暂的写失败情况，抛出异常。这是因为在故障迁移的时候，是不能写数据的，中间有服务不可用的过程，在迁移后会自动恢复。并且当原来的主机再启动后，会变成新主机的从机使用，这是因为哨兵会动态的修改配置文件。</p><h2 id="四、哨兵模式原理" tabindex="-1"><a class="header-anchor" href="#四、哨兵模式原理" aria-hidden="true">#</a> 四、哨兵模式原理</h2><p>1、关于哨兵的原理，关键是了解以下核心概念：</p><ul><li>主观下线：在心跳检测的定时任务中，如果其他节点超过一定时间没有回复，哨兵节点就会将其进行主观下线。顾名思义，主观下线的意思是一个哨兵节点“主观地”判断下线；与主观下线相对应的是客观下</li><li>客观下线：哨兵节点在对主节点进行主观下线后，会通过<code>sentinel is-master-down-by-addr</code>命令询问其他哨兵节点该主节点的状态；如果判断主节点下线的哨兵数量达到一定数值，则对该主节点进行客观下线</li></ul><p>需要特别注意的是，客观下线是主节点才有的概念；如果从节点和哨兵节点发生故障，被哨兵主观下线后，不会再有后续的客观下线和故障转移操作。</p><p>2、每个哨兵节点维护了3个定时任务。定时任务的功能分别如下：</p><ul><li>每10秒通过向主从节点发送<code>info</code>命令获取最新的主从结构：发现<code>slave</code>节点，并确定主从关系</li><li>每2秒通过发布订阅功能获取其他哨兵节点的信息，交互对节点的“看法”和自身情况</li><li>每1秒通过向其他节点发送<code>ping</code>命令进行心跳检测，判断是否下线</li></ul><p>3、领导者选举</p><p>选举领导者哨兵节点：当主节点被判断客观下线以后，各个哨兵节点会进行协商，选举出一个领导者哨兵节点，并由该领导者节点对其进行故障转移操作。</p><p>监视该主节点的所有哨兵都有可能被选为领导者，选举使用的算法是<code>Raft</code>算法；<code>Raft</code>算法的基本思路是先到先得：即在一轮选举中，哨兵A向B发送成为领导者的申请，如果B没有同意过其他哨兵，则会同意A成为领导者。</p><p>在从节点中选择新的主节点，选择的原则如下：</p><ul><li>首先过滤掉不健康的从节点</li><li>然后选择优先级最高的从节点（由<code>replica-priority</code>指定）</li><li>如果优先级无法区分，则选择复制偏移量最大的从节点</li><li>如果仍无法区分，则选择<code>runid</code>最小的从节点</li><li>更新主从状态：通过<code>slaveof no one</code>命令，让选出来的从节点成为主节点，并通过<code>slaveof</code>命令让其他节点成为其从节点</li><li>将已经下线的主节点保持关注，当再次上线后设置为新的主节点的从节点</li></ul><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2><p>在实际使用过程中，哨兵节点的数量应大于一个。一方面增加哨兵节点的冗余，避免哨兵本身成为高可用的瓶颈；另一方面减少对下线的误判。此外，不同的哨兵节点应部署在不同的物理机上。并且哨兵节点的数量应该是奇数，便于哨兵通过投票进行领导者选举的决策、客观下线的决策等。</p><p>在主从复制的基础上，哨兵引入了主节点的自动故障转移，进一步提高了Redis的高可用性；但是哨兵的缺陷同样很明显：哨兵无法对从节点进行自动故障转移，在读写分离场景下，从节点故障会导致读服务不可用，需要我们对从节点做额外的监控、切换操作。此外，哨兵仍然没有解决写操作无法负载均衡、及存储能力受到单机限制的问题。</p>`,58);function o(c,l){return s(),a("div",null,[e(" more "),i])}const u=n(p,[["render",o],["__file","guard.html.vue"]]);export{u as default};
