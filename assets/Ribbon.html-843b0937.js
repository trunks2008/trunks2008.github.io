import{_ as n,W as a,X as s,$ as e,Z as c}from"./framework-9e67db09.js";const o={},t=c(`<p>Spring cloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡工具，简单的说，它能够使用负载均衡器基于某种规则或算法调用我们的微服务集群，并且我们也可以很容易地使用Ribbon实现自定义负载均衡算法。</p><p>在之前使用Eureka的过程中，需要导入对应的依赖，但是Ribbon有一点特殊，不需要引入依赖也可以使用。这是因为在Eureka-client中，已经默认为我们集成好了Ribbon，可以直接拿来使用。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67fc600159ce45eb9f069b704bf6939c~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>根据Spring Boot自动配置原理，先从各个starter的<code>spring.factories</code>中寻找可能存在的相关配置类：</p><ul><li>在spring-cloud-common中，存在自动配置类<code>LoadBalancerAutoConfiguration</code></li><li>在eureka-client中，存在配置类<code>RibbonEurekaAutoConfiguration</code></li><li>在ribbon中，存在配置类<code>RibbonAutoConfiguration</code></li></ul><p>需要注意，<code>RibbonEurekaAutoConfiguration</code>中存在<code>@AutoConfigureAfter</code>注解，说明需要在加载<code>RibbonAutoConfiguration</code>配置类后再加载当前配置类。这三个类的配置将在后面结合具体代码调试中说明。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a05d603058b34125b1f56330004732f4~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>下面我们通过代码调试的方式来探究Ribbon的运行流程。</p><h2 id="调用流程" tabindex="-1"><a class="header-anchor" href="#调用流程" aria-hidden="true">#</a> 调用流程</h2><p>Ribbon的调用过程非常简单，使用<code>RestTemplate</code>加上<code>@LoadBalanced</code>注解就可以开启客户端的负载均衡，写一个简单的测试用例进行测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@LoadBalanced</span>
<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> service<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> result<span class="token operator">=</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://eureka-hi/&quot;</span><span class="token operator">+</span>service<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f14a9141912d42f9be59954e1cc504b0~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>通过结果可以看出，<code>RestTemplate</code>基于服务名称，即可实现访问Eureka-client集群下的不同服务实例，实现负载均衡的调用方式。看一下<code>@LoadBalanced</code>注解的定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Annotation to mark a RestTemplate bean to be configured to use a LoadBalancerClient
 * <span class="token keyword">@author</span> Spencer Gibb
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Qualifier</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">LoadBalanced</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注释说明了<code>@LoadBalanced</code>用于注解在<code>RestTemplate</code>上实现负载均衡，那么来看一下<code>@LoadBalanced</code>注解是如何生效的呢？回到前面提到的配置类<code>LoadBalancerAutoConfiguration</code>中：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39cf2d7ac2e846e9ab4ae8a5548ef458~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在配置类中定义了一个<code>LoadBalancerInterceptor</code>拦截器，并且为<code>restTemplate</code>添加了这个拦截器。在<code>restTemplate</code>每次执行方法请求时，都会调用<code>intercept</code>方法执行拦截：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f03e749020f48f08abe60d61cf75629~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在上面的<code>intercept</code>拦截方法中，首先获取本次访问的url地址，从中获取本次要访问的服务名，然后调用<code>RibbonLoadBalancerClient</code>中的<code>execute</code>方法。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b103dfd59dce4e6d9339220ad7a76ac2~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在这里通过服务名获取了该服务对应的负载均衡器<code>ILoadBalancer</code>的实例对象，然后调用该实例的<code>chooseServer</code>方法获取一个可用服务实例，关于<code>ILoadBalancer</code>会在后面具体介绍。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66b5679f5fd84aad92017129d96ee3cf~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在<code>execute</code>方法调用<code>apply</code>方法的过程中，会调用<code>LoadBalancerContext</code>的<code>reconstructURIWithServer</code>方法重构将要访问的<code>url</code>地址：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c971945013a94998882273b3ed1e87cf~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在拼接完成<code>url</code>后，调用<code>AbstractClientHttpRequest</code>类的<code>execute</code>方法发送请求。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4f9004454054ab9a7e0b7c85bc9cf36~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>调用<code>executeInternal</code>方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18fa27e6bdf741cb821d8bffac6ea816~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>可以看到，最终<code>RestTemplate</code>底层调用了<code>HttpURLConnection</code>来发送请求。</p><p>总体的调用流程我们总结完了，那么负载均衡的过程究竟是如何实现的呢？我们来详细梳理一下。</p><h2 id="负载均衡过程" tabindex="-1"><a class="header-anchor" href="#负载均衡过程" aria-hidden="true">#</a> 负载均衡过程</h2><p>在Ribbon中有个非常重要的组件<code>LoadBalancerClient</code>，它是负载均衡的一个客户端，我们从这入手写一个测试接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">LoadBalancerClient</span> loadBalancerClient<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/choose&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">loadBalance</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">ServiceInstance</span> instance <span class="token operator">=</span> loadBalancerClient<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用接口测试结果，可以看出是通过<code>LoadBalancerClient</code> 的<code>choose</code>方法，选择调用了不同端口上的服务实例，体现了负载均衡：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b576b88ab8b147049f1b76017e6fea1a~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>对代码进行调试，发现注入的<code>LoadBalancerClient</code>的实现类正是之前看见过的<code>RibbonLoadBalancerClient</code>，进入其<code>choos</code>方法中，先后调用两次<code>getServer</code>方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a5086fb6b0c4d59bbf1cd0031b97ef0~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>此时<code>loadBalancer</code>实例对象为<code>ZoneAwareLoadBalancer</code>，并且里面的<code>allServerList</code>列表已经缓存了所有的服务列表。调用<code>chooseServer</code>方法，由于此时我们只有一个<code>zone</code>，所以默认调用父类<code>BaseLoadBalancer</code>的<code>chooseServer</code>方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3eb174bc196b46d5bd534a27a8bf7375~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在父类的方法中，根据<code>IRule</code>实例定义的规则来确定返回哪一个具体的Server：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/805a761a9651469b8c808892703bc961~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>这里的<code>IRule</code>实现使用了默认的<code>ZoneAvoidanceRule</code>，为区域内亲和选择算法。关于<code>IRule</code>负载均衡算法在后面再做介绍。由于<code>ZoneAvoidanceRule</code>中没有实现<code>choose</code>方法，直接调用其父类<code>PredicateBasedRule</code>的<code>choose</code>方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/184957b846ec4da2bf9a17a2d46509ba~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>调用<code>AbstractServerPredicate</code>的<code>chooseRoundRobinAfterFiltering</code>方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58452fe6df254a52a714898590a03f6d~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>实现非常简单，通过轮询的方式选择下标：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14afbc13560c495d9e52df45175147a1~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>返回<code>choose</code>方法中，可以看到已经获得了一个server实例：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8a075fab1184416b7d2f603dcfab471~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="核心组件iloadbalancer" tabindex="-1"><a class="header-anchor" href="#核心组件iloadbalancer" aria-hidden="true">#</a> 核心组件ILoadBalancer</h2><p>返回服务实例的调用过程大体已经了解了，但是我们在上篇中略过了一个内容，就是获取<code>LoadBalancer</code>的过程，回去看第一次调用的<code>getServer</code>方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39724dcf1ec54b50b5d7078f90229088~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9b617432a1f4568ab1b824cae8f4d56~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>这里通过<code>getLoadBalancer</code>方法返回一个<code>ILoadBalancer</code>负载均衡器，具体调用了Spring的<code>BeanFactoryUtil</code>，通过<code>getBean</code>方法从spring容器中获取类型匹配的bean实例：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c77a81203cf444285373de045205a08~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>回到前面<code>getServer</code>方法调用的那张图，你就会发现这时候已经返回了一个<code>ZoneAwareLoadBalancer</code>，并且其中已经保存好了服务列表。看一下<code>ILoadBalancer</code> 的接口定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILoadBalancer</span> <span class="token punctuation">{</span>
  <span class="token comment">//往该ILoadBalancer中添加服务</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addServers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> newServers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//选择一个可以调用的实例，keyb不是服务名称，而是zone的id</span>
  <span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">chooseServer</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//标记下线服务</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">markServerDown</span><span class="token punctuation">(</span><span class="token class-name">Server</span> server<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Deprecated</span>
  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> <span class="token function">getServerList</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> availableOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//获取可用服务列表</span>
  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> <span class="token function">getReachableServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//获取所有服务列表</span>
  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该接口定义了Ribbon中核心的两项内容，<strong>服务获取</strong>与<strong>服务选择</strong>，可以说，<code>ILoadBalancer</code>是Ribbon中最重要的一个组件，它起到了承上启下的作用，既要连接 Eureka获取服务地址，又要调用<code>IRule</code>利用负载均衡算法选择服务。下面分别介绍。</p><h3 id="服务获取" tabindex="-1"><a class="header-anchor" href="#服务获取" aria-hidden="true">#</a> 服务获取</h3><p>Ribbon在选择之前需要获取服务列表，而Ribbon本身不具有服务发现的功能，所以需要借助Eureka来解决获取服务列表的问题。回到文章开头说到的配置类<code>RibbonEurekaAutoConfiguration</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span>
<span class="token annotation punctuation">@ConditionalOnRibbonAndEurekaEnabled</span>
<span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token class-name">RibbonAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RibbonClients</span><span class="token punctuation">(</span>defaultConfiguration <span class="token operator">=</span> <span class="token class-name">EurekaRibbonClientConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonEurekaAutoConfiguration</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中定义了其默认配置类为<code>EurekaRibbonClientConfiguration</code>，在它的<code>ribbonServerList</code>方法中创建了服务发现组件<code>DiscoveryEnabledNIWSServerList</code>：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f097ea36b64406c80290a91621923e0~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><code>DiscoveryEnabledNIWSServerList</code>实现了<code>ServerList</code>接口，该接口用于初始化服务列表及更新服务列表。首先看一下<code>ServerList</code>的接口定义，其中两个方法分别用于初始化服务列表及更新服务列表：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServerList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInitialListOfServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUpdatedListOfServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>DiscoveryEnabledNIWSServerList</code>中，初始化与更新两个方法其实调用了同一个方法来实现具体逻辑：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05d77f6284da433ab561e6c2c8a35e1e~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>进入<code>obtainServersViaDiscovery</code>方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8eb9eb763d0549418dabdea944b8d159~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>可以看到，这里先得到一个<code>EurekaClient</code>的实例，然后借助<code>EurekaClient</code>的服务发现功能，来获取服务的实例列表。在获取了实例信息后，判断服务的状态如果为<code>UP</code>，那么最终将它加入<code>serverList</code>中。</p><p>在获取得到<code>serverList</code>后，会进行缓存操作。首先进入<code>DynamicServerListLoadBalancer</code>的<code>setServerList</code>方法，然后调用父类<code>BaseLoadBalancer</code>的<code>setServersList</code>方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b0718ad91b04588bd56660b5376704a~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在<code>BaseLoadBalancer</code>中，定义了两个缓存列表：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> allServerList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> upServerList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在父类的<code>setServersList</code>中，将拉取的<code>serverList</code>赋值给缓存列表<code>allServerList</code>：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/962fc733c272496fad2102c76e941779~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在Ribbon从Eureka中得到了服务列表，缓存在本地List后，存在一个问题，如何保证在调用服务的时候服务仍然处于可用状态，也就是说应该如何解决缓存列表脏读问题？</p><p>在默认负载均衡器<code>ZoneAwareLoadBalancer</code>的父类<code>BaseLoadBalancer</code>构造方法中，调用<code>setupPingTask</code>方法，并在其中创建了一个定时任务，使用<code>ping</code>的方式判断服务是否可用：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/590f1869583441bc8ff24a3fbc0c1eac~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><code>runPinger</code>方法中，调用<code>SerialPingStrategy</code>的<code>pingServers</code>方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0f1e2e347994d2d9d29a09a391c4094~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><code>pingServers</code>方法中，调用<code>NIWSDiscoveryPing</code>的<code>isAlive</code>方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ca5f92b6ee74b14b613300d737a9856~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><code>NIWSDiscoveryPing</code>实现了<code>IPing</code>接口，在<code>IPing</code> 接口中，仅有一个<code>isAlive</code>方法用来判断服务是否可用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPing</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token class-name">Server</span> server<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>NIWSDiscoveryPing</code>的<code>isAlive</code>方法实现：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba4d9673269643a9adb26d2db809ec3d~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>因为本地的<code>serverList</code>为缓存值，可能与eureka中不同，所以从eureka中去查询该实例的状态，如果eureka里面显示该实例状态为<code>UP</code>，就返回true，说明服务可用。</p><p>返回<code>Pinger</code>的<code>runPingger</code>的方法调用处：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00b432fb6ed84a54ace1d3fa543ae8c5~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在获取到服务的状态列表后进行循环，如果状态改变，加入到<code>changedServers</code>中，并且把所有可用服务加入<code>newUpList</code>，最终更新<code>upServerList</code>中缓存值。但是在阅读源码中发现，创建了一个监听器用于监听<code>changedServers</code>这一列表，但是只是一个空壳方法，并没有实际代码对列表变动做出实际操作。</p><p>需要注意的是，在调试过程中当我下线一个服务后，<code>results</code>数组并没有按照预期的将其中一个服务的状态返回为false，而是<code>results</code>数组中的元素只剩下了一个，也就说明，除了使用ping的方式去检测服务是否在线外，Ribbon还使用了别的方式来更新服务列表。</p><p>我们在<code>BaseLoadBalancer</code>的<code>setServersList</code>方法中添加一个断点：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f508a47a7134ac68dd404587ed9cc35~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>等待程序运行，可以发现，在还没有进入执行<code>IPing</code>的定时任务前，已经将下线服务剔除，只剩下了一个可用服务。查看调用链，最终可以发现使用了定时调度线程池调用了<code>PollingServerListUpdater</code>类的<code>start</code>方法，来进行更新服务操作：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0df858ca7444356a48291a70cc9169d~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>回到<code>BaseLoadBalancer</code>的<code>setServersList</code>方法中：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/868d0a3f55ea41008798b8459affc4a2~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在这里就用新的服务列表更新了旧服务列表，因此当执行<code>IPing</code>的线程再执行时，服务列表中只剩下了一个服务实例。</p><p>综上可以发现，Ribbon为了解决服务列表的脏读现象，采用了两种手段：</p><ul><li>更新列表</li><li>ping机制</li></ul><p>在测试中发现，更新机制和ping机制功能基本重合，并且在ping的时候不能执行更新，在更新的时候不能运行ping，所以很难检测到ping失败的情况。</p><h3 id="服务选取" tabindex="-1"><a class="header-anchor" href="#服务选取" aria-hidden="true">#</a> 服务选取</h3><p>服务选取的过程就是从服务列表中按照约定规则选取服务实例，与负载均衡算法相关。这里引入Ribbon对于负载均衡策略实现的接口<code>IRule</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRule</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLoadBalancer</span><span class="token punctuation">(</span><span class="token class-name">ILoadBalancer</span> lb<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">public</span> <span class="token class-name">ILoadBalancer</span> <span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>choose</code>为核心方法，用于实现具体的选择逻辑。</p><p>Ribbon中，下面7个类默认实现了<code>IRule</code>接口，为我们提供负载均衡算法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9d26786e0b14e62a9d545e1ccd4e9be~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在刚才调试过程中，可以知道Ribbon默认使用的是<code>ZoneAvoidanceRule</code>区域亲和负载均衡算法，优先调用一个<code>zone</code>区间中的服务，并使用轮询算法，具体实现过程前面已经介绍过不再赘述。</p><p>当然，也可以由我们自己实现<code>IRule</code>接口，重写其中的<code>choose</code>方法来实现自己的负载均衡算法，然后通过<code>@Bean</code>的方式注入到spring容器中。当然也可以将不同的服务应用不同的<code>IRule</code>策略，这里需要注意的是，Spring cloud的官方文档中提醒我们，如果多个微服务要调用不同的<code>IRule</code>，那么创建出<code>IRule</code>的配置类不能放在<code>ComponentScan</code>的目录下面，这样所有的微服务都会使用这一个策略。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8f28b9b5e6a48368b6780d9401c7887~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>需要在主程序运行的com包外另外创建一个config包用于专门存放配置类，然后在启动类上加上<code>@RibbonClients</code>注解，不同服务应用不同配置类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RibbonClients</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;eureka-hi&quot;</span><span class="token punctuation">,</span>configuration <span class="token operator">=</span> <span class="token class-name">HiRuleConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;eureka-test&quot;</span><span class="token punctuation">,</span>configuration <span class="token operator">=</span> <span class="token class-name">TestRuleConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceFeignApplication</span> <span class="token punctuation">{</span>
……
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>综上所述，在Ribbon的负载均衡中，大致可以分为以下几步：</p><ul><li>拦截请求，通过请求中的url地址，截取服务名称</li><li>通过<code>LoadBalancerClient</code>获取<code>ILoadBalancer</code></li><li>使用Eureka获取服务列表</li><li>通过<code>IRule</code>负载均衡策略选择具体服务</li><li><code>ILoadBalancer</code>通过<code>IPing</code>及定时更新机制来维护服务列表</li><li>重构该url地址，最终调用<code>HttpURLConnection</code>发起请求</li></ul><p>了解了整个调用流程后，我们更容易明白为什么Ribbon叫做客户端的负载均衡。与nginx服务端负载均衡不同，nginx在使用反向代理具体服务的时候，调用端不知道都有哪些服务。而Ribbon在调用之前，已经知道有哪些服务可用，直接通过本地负载均衡策略调用即可。而在实际使用过程中，也可以根据需要，结合两种方式真正实现高可用。</p>`,118);function p(i,l){return a(),s("div",null,[e(" more "),t])}const u=n(o,[["render",p],["__file","Ribbon.html.vue"]]);export{u as default};
