import{_ as n,W as s,X as a,$ as t,Z as e}from"./framework-9e67db09.js";const p={},o=e(`<p>最近在工作中，遇到了这样一个业务场景，我们需要关注一个业务系统数据库中某几张表的数据，当数据发生新增或修改时，将它同步到另一个业务系统数据库中的表中。</p><p>一提到数据库的同步，估计大家第一时间想到的就是基于<code>binlog</code>的主从复制了，但是放在我们的场景中，还有几个问题：</p><ul><li>第一，并不是需要复制所有表的数据，复制对象只有少量的几张表</li><li>第二，也是比较麻烦的，两个业务系统数据库表结构可能不一致。例如，要同步数据库1的A表中的某些字段到数据库2的B表中，在这一过程中，A表和B表的字段并不是完全相同</li></ul><p>这样的话，我们只能通过代码的方式，首先获取到数据库1表中数据的变动，再通过手动映射的方式，插入到数据库2的表中。但是，获取变动数据的这一过程，还是离不开<code>binlog</code>，因此我们就需要在代码中对<code>binlog</code>进行一下监控。</p><p>先说结论，我们最终使用了一个开源工具<code>mysql-binlog-connector-java</code>，用来监控<code>binlog</code>变化并获取数据，获取数据后再手动插入到另一个库的表中，基于它来实现了数据表的同步。项目的git地址如下：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//github.com/shyiko/mysql-binlog-connector-java</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在正式开始前，还是先简单介绍一下<code>mysql</code>的<code>binlog</code>，<code>binlog</code>是一个二进制文件，它保存在磁盘中，是用来记录数据库表结构变更、表数据修改的二进制日志。其实除了数据复制外，它还可以实现数据恢复、增量备份等功能。</p><p>启动项目前，首先需要确保<code>mysql</code>服务已经启用了<code>binlog</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>show variables like <span class="token string">&#39;log_bin&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果为值为<code>OFF</code>，表示没有启用，那么需要首先启用<code>binlog</code>，修改配置文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">log_bin</span><span class="token operator">=</span>mysql-bin
binlog-format<span class="token operator">=</span>ROW
server-id<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对参数做一个简要说明：</p><ul><li>在配置文件中加入了<code>log_bin</code>配置项后，表示启用了<code>binlog</code></li><li><code>binlog-format</code>是<code>binlog</code>的日志格式，支持三种类型，分别是<code>STATEMENT</code>、<code>ROW</code>、<code>MIXED</code>，我们在这里使用<code>ROW</code>模式</li><li><code>server-id</code>用于标识一个sql语句是从哪一个<code>server</code>写入的，这里一定要进行设置，否则我们在后面的代码中会无法正常监听到事件</li></ul><p>在更改完配置文件后，重启<code>mysql</code>服务。再次查看是否启用<code>binlog</code>，返回为<code>ON</code>，表示已经开启成功。</p><p>在Java项目中，首先引入<code>maven</code>坐标：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.shyiko<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-binlog-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.21.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写一段简单的示例，看看它的具体使用方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BinaryLogClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryLogClient</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">3306</span><span class="token punctuation">,</span> <span class="token string">&quot;hydra&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">setServerId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    client<span class="token punctuation">.</span><span class="token function">registerEventListener</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">EventData</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">TableMapEventData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Table:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TableMapEventData</span> tableMapEventData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TableMapEventData</span><span class="token punctuation">)</span> data<span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tableMapEventData<span class="token punctuation">.</span><span class="token function">getTableId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;: [&quot;</span><span class="token operator">+</span>tableMapEventData<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> tableMapEventData<span class="token punctuation">.</span><span class="token function">getTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">UpdateRowsEventData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Update:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">WriteRowsEventData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Insert:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">DeleteRowsEventData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Delete:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，创建一个<code>BinaryLogClient</code>客户端对象，初始化时需要传入<code>mysql</code>的连接信息，创建完成后，给客户端注册一个监听器，来实现它对<code>binlog</code>的监听和解析。在监听器中，我们暂时只对4种类型的事件数据进行了处理，除了<code>WriteRowsEventData</code>、<code>DeleteRowsEventData</code>、<code>UpdateRowsEventData</code>对应增删改操作类型的事件数据外，还有一个<code>TableMapEventData</code>类型的数据，包含了表的对应关系，在后面的例子中再具体说明。</p><p>在这里，客户端监听到的是数据库级别的所有事件，并且可以监听到表的<code>DML</code>语句和<code>DDL</code>语句，所以我们只需要处理我们关心的事件数据就行，否则会收到大量的冗余数据。</p><p>启动程序，控制台输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>com.github.shyiko.mysql.binlog.BinaryLogClient openChannelToBinaryLogStream
信息: Connected to 127.0.0.1:3306 at mysql-bin.000002/1046 (sid:2, cid:10)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>连接mysql的<code>binlog</code>成功，接下来，我们在数据库中插入一条数据，这里操作的数据库名字是<code>tenant</code>，表是<code>dept</code>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&quot;人力&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时，控制台就会打印监听到事件的数据：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Table:
108: [tenant-dept]
Insert:
WriteRowsEventData{tableId=108, includedColumns={0, 1, 2, 3}, rows=[
    [8, 人力, , 1]
]}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们监听到的事件类型数据有两类，第一类是<code>TableMapEventData</code>，通过它可以获取操作的数据库名称、表名称以及表的<code>id</code>。之所以我们要监听这个事件，是因为之后监听的实际操作中返回数据中包含了表的<code>id</code>，而没有表名等信息，所以如果我们想知道具体的操作是在哪一张表的话，就要先维护一个<code>id</code>与表的对应关系。</p><p>第二个打印出来的监听事件数据是<code>WriteRowsEventData</code>，其中记录了<code>insert</code>语句作用的表，插入涉及到的列，以及实际插入的数据。另外，如果我们只需要对特定的一张或几张表进行处理的话，也可以提前设置表的名单，在这里根据表<code>id</code>到表名的映射关系，实现数据的过滤，</p><p>接下来，我们再执行一条<code>update</code>语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> dept <span class="token keyword">set</span> tenant_id<span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">8</span> <span class="token operator">or</span> id<span class="token operator">=</span><span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>控制台输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Table:
108: [tenant-dept]
Update:
UpdateRowsEventData{tableId=108, includedColumnsBeforeUpdate={0, 1, 2, 3}, includedColumns={0, 1, 2, 3}, rows=[
    {before=[8, 人力, , 1], after=[8, 人力, , 3]},
    {before=[9, 人力, , 1], after=[9, 人力, , 3]}
]}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在执行<code>update</code>语句时，可能会作用于多条数据，因此在实际修改的数据中，可能包含多行记录，这一点体现在上面的<code>rows</code>中，包含了<code>id</code>为8和9的两条数据。</p><p>最后，再执行一条<code>delete</code>语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> dept <span class="token keyword">where</span> tenant_id<span class="token operator">=</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>控制台打印如下，<code>rows</code>中同样返回了生效的两条数据：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Table:
108: [tenant-dept]
Delete:
DeleteRowsEventData{tableId=108, includedColumns={0, 1, 2, 3}, rows=[
    [8, 人力, , 3],
    [9, 人力, , 3]
]}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单的使用原理介绍完成后，再回到我们原先的需求上，需要将一张表中新增或修改的数据同步到另一张表中，问题还有一个，就是如何将返回的数据对应到所在的列上。这时应该怎么实现呢？以<code>update</code>操作为例，我们要对提取的数据后进行一下处理，更改上面例子中的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">UpdateRowsEventData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Update:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UpdateRowsEventData</span> updateRowsEventData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UpdateRowsEventData</span><span class="token punctuation">)</span> data<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span><span class="token class-name">Serializable</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> row <span class="token operator">:</span> updateRowsEventData<span class="token punctuation">.</span><span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> entries <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSONObject</span> dataObject <span class="token operator">=</span> <span class="token function">getDataObject</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在将<code>data</code>类型强制转换为<code>UpdateRowsEventData</code>后，可以使用<code>getRows</code>方法获取到更新的行数据，并且能够取到每一列的值。</p><p>之后，调用了一个自己实现的<code>getDataObject</code>方法，用它来实现数据到列的绑定过程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">JSONObject</span> <span class="token function">getDataObject</span><span class="token punctuation">(</span><span class="token class-name">List</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">JSONObject</span> resultObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> format <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;id\\&quot;:\\&quot;0\\&quot;,\\&quot;dept_name\\&quot;:\\&quot;1\\&quot;,\\&quot;comment\\&quot;:\\&quot;2\\&quot;,\\&quot;tenant_id\\&quot;:\\&quot;3\\&quot;}&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">JSONObject</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> json<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        resultObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> resultObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>format</code>字符串中，提前维护了一个数据库表的字段顺序的字符串，标识了每个字段位于顺序中的第几个位置。通过上面这个函数，能够实现数据到列的填装过程，我们再执行一条<code>update</code>语句来查看一下结果：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> dept <span class="token keyword">set</span> tenant_id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">comment</span><span class="token operator">=</span><span class="token string">&quot;1&quot;</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>控制台打印结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Table:
108: [tenant-dept]
Update:
[8, 人力, 1, 3]
{&quot;tenant_id&quot;:3,&quot;dept_name&quot;:&quot;人力&quot;,&quot;comment&quot;:&quot;1&quot;,&quot;id&quot;:8}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，将修改后的这一条记录中的属性填装到了它对应的列中，之后我们再根据具体的业务逻辑中，就可以根据字段名取出数据，将数据同步到其他的表了。</p>`,47);function c(l,i){return s(),a("div",null,[t(" more "),o])}const d=n(p,[["render",c],["__file","MysqlBinlogJava.html.vue"]]);export{d as default};
