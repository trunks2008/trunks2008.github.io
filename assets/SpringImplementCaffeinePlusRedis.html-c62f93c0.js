import{_ as e,W as p,X as t,$ as c,Y as n,a0 as s,a1 as o,Z as l,C as i}from"./framework-9e67db09.js";const u={},k=l(`<p>在上一篇文章Redis+Caffeine两级缓存，让访问速度纵享丝滑中，我们介绍了3种整合<code>Caffeine</code>和<code>Redis</code>作为两级缓存使用的方法，虽然说能够实现功能，但实现手法还是太粗糙了，并且遗留了一些问题没有处理。本文将在上一篇的基础上，围绕两个方面进行进一步的改造：</p><ul><li><code>JSR107</code>定义了缓存使用规范，spring中提供了基于这个规范的接口，所以我们可以直接使用spring中的接口进行<code>Caffeine</code>和<code>Redis</code>两级缓存的整合改造</li><li>在分布式环境下，如果一台主机的本地缓存进行修改，需要通知其他主机修改本地缓存，解决分布式环境下本地缓存一致性问题</li></ul><p>好了，在明确了需要的改进问题后，下面我们开始正式修改。</p><h2 id="改造" tabindex="-1"><a class="header-anchor" href="#改造" aria-hidden="true">#</a> 改造</h2><p>在上篇文章的<code>v3</code>版本中，我们使用自定义注解的方式实现了两级缓存通过<strong>一个注解</strong>管理的功能。本文我们换一种方式，直接通过扩展spring提供的接口来实现这个功能，在进行整合之前，我们需要简单了解一下<code>JSR107</code>缓存规范。</p><h3 id="jsr107-规范" tabindex="-1"><a class="header-anchor" href="#jsr107-规范" aria-hidden="true">#</a> JSR107 规范</h3><p>在<code>JSR107</code>缓存规范中定义了5个核心接口，分别是<code>CachingProvider</code>,<code>CacheManager</code>,<code>Cache</code>, <code>Entry</code>和<code>Expiry</code>，参考下面这张图，可以看到除了<code>Entry</code>和<code>Expiry</code>以外，从上到下都是一对多的包含关系。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f8f66dfcbf34646b88b7b0e4d04765f~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面这张图我们可以看出，一个应用可以创建并管理多个<code>CachingProvider</code>，同样一个<code>CachingProvider</code>也可以管理多个<code>CacheManager</code>，缓存管理器<code>CacheManager</code>中则维护了多个<code>Cache</code>。</p><p><code>Cache</code>是一个类似<code>Map</code>的数据结构，<code>Entry</code>就是其中存储的每一个<code>key-value</code>数据对，并且每个<code>Entry</code>都有一个过期时间<code>Expiry</code>。而我们在使用spring集成第三方的缓存时，只需要实现<code>Cache</code>和<code>CacheManager</code>这两个接口就可以了，下面分别具体来看一下。</p><h3 id="cache" tabindex="-1"><a class="header-anchor" href="#cache" aria-hidden="true">#</a> Cache</h3><p>spring中的<code>Cache</code>接口规范了缓存组件的定义，包含了缓存的各种操作，实现具体缓存操作的管理。例如我们熟悉的<code>RedisCache</code>、<code>EhCacheCache</code>等，都实现了这个接口。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1af57fd9341410c8c831dfa5c223e61~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在<code>Cache</code>接口中，定义了<code>get</code>、<code>put</code>、<code>evict</code>、<code>clear</code>等方法，分别对应缓存的存入、取出、删除、清空操作。不过我们这里不直接使用<code>Cache</code>接口，上面这张图中的<code>AbstractValueAdaptingCache</code>是一个抽象类，它已经实现了<code>Cache</code>接口，是spring在<code>Cache</code>接口的基础上帮助我们进行了一层封装，所以我们直接继承这个类就可以。</p><p>继承<code>AbstractValueAdaptingCache</code>抽象类后，除了创建<code>Cache</code>的构造方法外，还需要实现下面的几个方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 在缓存中实际执行查找的操作，父类的get()方法会调用这个方法</span>
<span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">Object</span> <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过key获取缓存值，如果没有找到，会调用valueLoader的call()方法</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> valueLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将数据放入缓存中</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除缓存</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">evict</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 清空缓存中所有数据</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取缓存名称，一般在CacheManager创建时指定</span>
<span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取实际使用的缓存</span>
<span class="token class-name">Object</span> <span class="token function">getNativeCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为要整合<code>RedisTemplate</code>和<code>Caffeine</code>的<code>Cache</code>，所以这些都需要在缓存的构造方法中传入，除此之外构造方法中还需要再传出缓存名称<code>cacheName</code>，以及在配置文件中实际配置的一些缓存参数。先看一下构造方法的实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleCache</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractValueAdaptingCache</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cacheName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> caffeineCache<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">DoubleCacheConfig</span> doubleCacheConfig<span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token class-name">DoubleCache</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> allowNullValues<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>allowNullValues<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">DoubleCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> cacheName<span class="token punctuation">,</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">,</span>
                       <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> caffeineCache<span class="token punctuation">,</span>
                       <span class="token class-name">DoubleCacheConfig</span> doubleCacheConfig<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>doubleCacheConfig<span class="token punctuation">.</span><span class="token function">getAllowNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cacheName<span class="token operator">=</span>cacheName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token operator">=</span>redisTemplate<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>caffeineCache<span class="token operator">=</span>caffeineCache<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>doubleCacheConfig<span class="token operator">=</span>doubleCacheConfig<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抽象父类的构造方法中只有一个<code>boolean</code>类型的参数<code>allowNullValues</code>，表示是否允许缓存对象为<code>null</code>。除此之外，<code>AbstractValueAdaptingCache</code>中还定义了两个包装方法来配合这个参数进行使用，分别是<code>toStoreValue</code>和<code>fromStoreValue</code>，特殊用途是用于在缓存<code>null</code>对象时进行包装、以及在获取时进行解析并返回。</p><p>我们之后会在<code>CacheManager</code>中调用后面这个自己实现的构造方法，来实例化<code>Cache</code>对象，参数中<code>DoubleCacheConfig</code>是使用<code>@ConfigurationProperties</code>读取的yml配置文件封装的数据对象，会在后面使用。</p><p>当一个方法添加了<code>@Cacheable</code>注解时，执行时会先调用父类<code>AbstractValueAdaptingCache</code>中的<code>get(key)</code>方法，它会再调用我们自己实现的<code>lookup</code>方法。在实际执行查找操作的<code>lookup</code>方法中，我们的逻辑仍然是先查找<code>Caffeine</code>、没有找到时再查找<code>Redis</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 先从caffeine中查找</span>
    <span class="token class-name">Object</span> obj <span class="token operator">=</span> caffeineCache<span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;get data from caffeine&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//再从redis中查找</span>
    <span class="token class-name">String</span> redisKey<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span> key<span class="token punctuation">;</span>
    obj <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;get data from redis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        caffeineCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>lookup</code>方法的返回结果不为<code>null</code>，那么就会直接返回结果给调用方。如果返回为<code>null</code>时，就会执行原方法，执行完成后调用<code>put</code>方法，将数据放入缓存中。接下来我们实现<code>put</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAllowNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;the value NULL will not be cached&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//使用 toStoreValue(value) 包装，解决caffeine不能存null的问题</span>
    caffeineCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token function">toStoreValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// null对象只存在caffeine中一份就够了，不用存redis了</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> redisKey<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheName <span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span> key<span class="token punctuation">;</span>
    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> expireOpt <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>doubleCacheConfig<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">DoubleCacheConfig</span><span class="token operator">::</span><span class="token function">getRedisExpire</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>expireOpt<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">,</span><span class="token function">toStoreValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
                expireOpt<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">,</span><span class="token function">toStoreValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面我们对于是否允许缓存空对象进行了判断，能够缓存空对象的好处之一就是可以避免<strong>缓存穿透</strong>。需要注意的是，<code>Caffeine</code>中是不能直接缓存<code>null</code>的，因此可以使用父类提供的<code>toStoreValue()</code>方法，将它包装成一个<code>NullValue</code>类型。在取出对象时，如果是<code>NullValue</code>，也不用我们自己再去调用<code>fromStoreValue()</code>将这个包装类型还原，父类的<code>get</code>方法中已经帮我们做好了。</p><p>另外，上面在<code>put</code>方法中缓存空对象时，只在<code>Caffeine</code>缓存中一份即可，可以不用在<code>Redis</code>中再存一份。</p><p>缓存的删除方法<code>evict()</code>和清空方法<code>clear()</code>的实现就比较简单了，直接删除一跳或全部数据即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">evict</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheName <span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    caffeineCache<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheName<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;:*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    caffeineCache<span class="token punctuation">.</span><span class="token function">invalidateAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取缓存<code>cacheName</code>和实际缓存的方法实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cacheName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getNativeCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们再来看一下带有两个参数的<code>get</code>方法，为什么把这个方法放到最后来说呢，因为如果我们只是使用注解来管理缓存的话，那么这个方法不会被调用到，简单看一下实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> valueLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ReentrantLock</span> lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加锁</span>
        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token function">lookup</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//没有找到</span>
        obj <span class="token operator">=</span> valueLoader<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放入缓存</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法的实现比较容易理解，还是先调用<code>lookup</code>方法寻找是否已经缓存了对象，如果没有找到那么就调用<code>Callable</code>中的<code>call</code>方法进行获取，并在获取完成后存入到缓存中去。至于这个方法如何使用，具体代码我们放在后面使用这一块再看。</p><p>需要注意的是，这个方法的接口注释中强调了需要我们自己来保证方法同步，因此这里使用了<code>ReentrantLock</code>进行了加锁操作。到这里，<code>Cache</code>的实现就完成了，下面我们接着看另一个重要的接口<code>CacheManager</code>。</p><h3 id="cachemanager" tabindex="-1"><a class="header-anchor" href="#cachemanager" aria-hidden="true">#</a> CacheManager</h3><p>从名字就可以看出，<code>CacheManager</code>是一个缓存管理器，它可以被用来管理一组<code>Cache</code>。在上一篇文章的v2版本中，我们使用的<code>CaffeineCacheManager</code>就实现了这个接口，除此之外还有<code>RedisCacheManager</code>、<code>EhCacheCacheManager</code>等也都是通过这个接口实现。</p><p>下面我们要自定义一个类实现<code>CacheManager</code>接口，管理上面实现的<code>DoubleCache</code>作为spring中的缓存使用。接口中需要实现的方法只有下面两个：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//根据cacheName获取Cache实例，不存在时进行创建</span>
<span class="token class-name">Cache</span> <span class="token function">getCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回管理的所有cacheName</span>
<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCacheNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在自定义的缓存管理器中，我们要使用<code>ConcurrentHashMap</code>维护一组不同的<code>Cache</code>，再定义一个构造方法，在参数中传入已经在spring中配置好的<code>RedisTemplate</code>，以及相关的缓存配置参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleCacheManager</span> <span class="token keyword">implements</span> <span class="token class-name">CacheManager</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Cache</span><span class="token punctuation">&gt;</span></span> cacheMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">DoubleCacheConfig</span> dcConfig<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DoubleCacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">,</span>
                              <span class="token class-name">DoubleCacheConfig</span> doubleCacheConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate <span class="token operator">=</span> redisTemplate<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dcConfig <span class="token operator">=</span> doubleCacheConfig<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后实现<code>getCache</code>方法，逻辑很简单，先根据<code>name</code>从<code>Map</code>中查找对应的<code>Cache</code>，如果找到则直接返回，这个参数<code>name</code>就是上一篇文章中提到的<code>cacheName</code>，<code>CacheManager</code>根据它实现不同<code>Cache</code>的隔离。</p><p>如果没有根据名称找到缓存的话，那么新建一个<code>DoubleCache</code>对象，并放入<code>Map</code>中。这里使用的<code>ConcurrentHashMap</code>的<code>putIfAbsent()</code>方法放入，避免重复创建<code>Cache</code>以及造成<code>Cache</code>内数据的丢失。具体代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Cache</span> <span class="token function">getCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Cache</span> cache <span class="token operator">=</span> cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> cache<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleCache</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> redisTemplate<span class="token punctuation">,</span> <span class="token function">createCaffeineCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dcConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Cache</span> oldCache <span class="token operator">=</span> cacheMap<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> oldCache <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> cache <span class="token operator">:</span> oldCache<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面创建<code>DoubleCache</code>对象的过程中，需要先创建一个<code>Caffeine</code>的<code>Cache</code>对象作为参数传入，这一过程主要是根据实际项目的配置文件中的具体参数进行初始化，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span>Cache</span> <span class="token function">createCaffeineCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Caffeine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> caffeineBuilder <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DoubleCacheConfig</span><span class="token punctuation">&gt;</span></span> dcConfigOpt <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dcConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dcConfigOpt<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">DoubleCacheConfig</span><span class="token operator">::</span><span class="token function">getInit</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>init<span class="token operator">-&gt;</span>caffeineBuilder<span class="token punctuation">.</span><span class="token function">initialCapacity</span><span class="token punctuation">(</span>init<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dcConfigOpt<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">DoubleCacheConfig</span><span class="token operator">::</span><span class="token function">getMax</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>max<span class="token operator">-&gt;</span>caffeineBuilder<span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dcConfigOpt<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">DoubleCacheConfig</span><span class="token operator">::</span><span class="token function">getExpireAfterWrite</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>eaw<span class="token operator">-&gt;</span>caffeineBuilder<span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span>eaw<span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dcConfigOpt<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">DoubleCacheConfig</span><span class="token operator">::</span><span class="token function">getExpireAfterAccess</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>eaa<span class="token operator">-&gt;</span>caffeineBuilder<span class="token punctuation">.</span><span class="token function">expireAfterAccess</span><span class="token punctuation">(</span>eaa<span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dcConfigOpt<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">DoubleCacheConfig</span><span class="token operator">::</span><span class="token function">getRefreshAfterWrite</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>raw<span class="token operator">-&gt;</span>caffeineBuilder<span class="token punctuation">.</span><span class="token function">refreshAfterWrite</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> caffeineBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getCacheNames</code>方法很简单，直接返回<code>Map</code>的<code>keySet</code>就可以了，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCacheNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> cacheMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置-使用" tabindex="-1"><a class="header-anchor" href="#配置-使用" aria-hidden="true">#</a> 配置&amp;使用</h3><p>在<code>application.yml</code>文件中配置缓存的参数，代码中使用<code>@ConfigurationProperties</code>接收到<code>DoubleCacheConfig</code>类中：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">doublecache</span><span class="token punctuation">:</span>
  <span class="token key atrule">allowNull</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">init</span><span class="token punctuation">:</span> <span class="token number">128</span>
  <span class="token key atrule">max</span><span class="token punctuation">:</span> <span class="token number">1024</span>
  <span class="token key atrule">expireAfterWrite</span><span class="token punctuation">:</span> <span class="token number">30</span>  <span class="token comment">#Caffeine过期时间</span>
  <span class="token key atrule">redisExpire</span><span class="token punctuation">:</span> <span class="token number">60</span>      <span class="token comment">#Redis缓存过期时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置自定义的<code>DoubleCacheManager</code>作为默认的缓存管理器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">DoubleCacheConfig</span> doubleCacheConfig<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DoubleCacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">,</span>
                                           <span class="token class-name">DoubleCacheConfig</span> doubleCacheConfig<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DoubleCacheManager</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">,</span>doubleCacheConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Service</code>中的代码还是老样子，不需要在代码中手动操作缓存，只要直接在方法上使用<code>@Cache</code>相关注解即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span> <span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">OrderMapper</span> orderMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;order&quot;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">getOrderById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Order</span> myOrder <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> myOrder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">&quot;order&quot;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">&quot;#order.id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">updateOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        orderMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> order<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">&quot;order&quot;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteOrder</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        orderMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//没有注解,使用get(key,callable)方法</span>
    <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">getOrderById2</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DoubleCacheManager</span> cacheManager <span class="token operator">=</span> <span class="token class-name">SpringContextUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DoubleCacheManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Cache</span> cache <span class="token operator">=</span> cacheManager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">&quot;order&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Order</span> order <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">)</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;get data from database&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Order</span> myOrder <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> myOrder<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> order<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意最后这个没有添加任何注解的方法，只有以这种方式调用时才会执行我们在<code>DoubleCache</code>中自己实现的<code>get(key,callable)</code>方法。到这里，基于<code>JSR107</code>规范和spring接口的两级缓存改造就完成了，下面我们看一下遗漏的第二个问题。</p><h2 id="分布式环境改造" tabindex="-1"><a class="header-anchor" href="#分布式环境改造" aria-hidden="true">#</a> 分布式环境改造</h2><p>前面我们说了，在分布式环境下，可能会存在各个主机上一级缓存不一致的问题。当一台主机修改了本地缓存后，其他主机是没有感知的，仍然保持了之前的缓存，那么这种情况下就可能取到脏数据。既然我们在项目中已经使用了<code>Redis</code>，那么就可以使用它的发布/订阅功能来使各个节点的缓存进行同步。</p><h3 id="定义消息体" tabindex="-1"><a class="header-anchor" href="#定义消息体" aria-hidden="true">#</a> 定义消息体</h3><p>在使用<code>Redis</code>发送消息前，需要先定义一个消息对象。其中的数据包括消息要作用于的<code>Cache</code>名称、操作类型、数据以及发出消息的源主机标识：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheMassage</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3574997636829868400L</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> cacheName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">CacheMsgType</span> type<span class="token punctuation">;</span>  <span class="token comment">//标识更新或删除操作</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> key<span class="token punctuation">;</span>			
    <span class="token keyword">private</span> <span class="token class-name">Object</span> value<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msgSource<span class="token punctuation">;</span>   <span class="token comment">//源主机标识，用来避免重复操作</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义一个枚举来标识消息的类型，是要进行更新还是删除操作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">CacheMsgType</span> <span class="token punctuation">{</span>
    <span class="token constant">UPDATE</span><span class="token punctuation">,</span>
    <span class="token constant">DELETE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消息体中的<code>msgSource</code>是添加的一个消息源主机的标识，添加这个是为了避免收到当前主机发送的消息后，再进行重复操作，也就是说收到本机发出的消息直接丢掉什么都不做就可以了。源主机标识这里使用的是主机ip加项目端口的方式，获取方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getMsgSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> host <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Environment</span> env <span class="token operator">=</span> <span class="token class-name">SpringContextUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> port <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;server.port&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> host<span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span>port<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样消息体的定义就完成了，之后只要调用<code>redisTemplate</code>的<code>convertAndSend</code>方法就可以把这个对象发布到指定的主题上了。</p><h3 id="redis消息配置" tabindex="-1"><a class="header-anchor" href="#redis消息配置" aria-hidden="true">#</a> Redis消息配置</h3><p>要使用<code>Redis</code>的消息监听功能，需要配置两项内容：</p><ul><li><code>MessageListenerAdapter</code>：消息监听适配器，可以在其中指定自定义的监听代理类，并且可以自定义使用哪个方法处理监听逻辑</li><li><code>RedisMessageListenerContainer</code>： 一个可以为消息监听器提供异步行为的容器，并且提供消息转换和分派等底层功能</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC</span><span class="token operator">=</span><span class="token string">&quot;cache.msg&quot;</span><span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">RedisMessageListenerContainer</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token class-name">MessageListenerAdapter</span> listenerAdapter<span class="token punctuation">,</span>
                                            <span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">RedisMessageListenerContainer</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        container<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        container<span class="token punctuation">.</span><span class="token function">addMessageListener</span><span class="token punctuation">(</span>listenerAdapter<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PatternTopic</span><span class="token punctuation">(</span><span class="token constant">TOPIC</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> container<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">MessageListenerAdapter</span> <span class="token function">adapter</span><span class="token punctuation">(</span><span class="token class-name">RedisMessageReceiver</span> receiver<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MessageListenerAdapter</span><span class="token punctuation">(</span>receiver<span class="token punctuation">,</span><span class="token string">&quot;receive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的监听适配器<code>MessageListenerAdapter</code>中，我们传入了一个自定义的<code>RedisMessageReceiver</code>接收并处理消息，并指定使用它的<code>receive</code>方法来处理监听到的消息，下面我们就来看看它如何接收消息并消费。</p><h3 id="消息消费逻辑" tabindex="-1"><a class="header-anchor" href="#消息消费逻辑" aria-hidden="true">#</a> 消息消费逻辑</h3><p>定义一个类<code>RedisMessageReceiver</code>来接收并消费消息，需要在它的方法中实现以下功能：</p><ul><li>反序列化接收到的消息，转换为前面定义的<code>CacheMassage</code>类型对象</li><li>根据消息的主机标识判断这条消息是不是本机发出的，如果是那么直接丢弃，只有接收到其他主机发出的消息才进行处理</li><li>使用<code>cacheName</code>得到具体使用的那一个<code>DoubleCache</code>实例</li><li>根据消息的类型判断要执行的是更新还是删除操作，调用对应的方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span> <span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisMessageReceiver</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DoubleCacheManager</span> manager<span class="token punctuation">;</span>

    <span class="token comment">//接收通知，进行处理</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CacheMassage</span> msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CacheMassage</span><span class="token punctuation">)</span> redisTemplate
                <span class="token punctuation">.</span><span class="token function">getValueSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//如果是本机发出的消息，那么不进行处理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getMsgSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">MessageSourceUtil</span><span class="token punctuation">.</span><span class="token function">getMsgSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;收到本机发出的消息，不做处理&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">DoubleCache</span> cache <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DoubleCache</span><span class="token punctuation">)</span> manager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getCacheName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token class-name">CacheMsgType</span><span class="token punctuation">.</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cache<span class="token punctuation">.</span><span class="token function">updateL1Cache</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>msg<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;更新本地缓存&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token class-name">CacheMsgType</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;删除本地缓存&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cache<span class="token punctuation">.</span><span class="token function">evictL1Cache</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，调用了<code>DoubleCache</code>中更新一级缓存方法<code>updateL1Cache</code>、删除一级缓存方法<code>evictL1Cache</code>，我们会后面在<code>DoubleCache</code>中进行添加。</p><h3 id="修改doublecache" tabindex="-1"><a class="header-anchor" href="#修改doublecache" aria-hidden="true">#</a> 修改DoubleCache</h3><p>在<code>DoubleCache</code>中先添加上面提到的两个方法，由<code>CacheManager</code>获取到具体缓存后调用，进行一级缓存的更新或删除操作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 更新一级缓存</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateL1Cache</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    caffeineCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 删除一级缓存</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">evictL1Cache</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    caffeineCache<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，完事具备只欠东风，我们要在什么场合发送消息呢？答案是在<code>DoubleCache</code>中存入缓存的<code>put</code>方法和移除缓存的<code>evict</code>方法中。首先修改<code>put</code>方法，方法中前面的逻辑不变，在最后添加发送消息通知其他节点更新一级缓存的逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 省略前面的不变代码...</span>

    <span class="token comment">//发送信息通知其他节点更新一级缓存	</span>
	<span class="token class-name">CacheMassage</span> cacheMassage
			<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheMassage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheName<span class="token punctuation">,</span> <span class="token class-name">CacheMsgType</span><span class="token punctuation">.</span><span class="token constant">UPDATE</span><span class="token punctuation">,</span>
			key<span class="token punctuation">,</span>value<span class="token punctuation">,</span> <span class="token class-name">MessageSourceUtil</span><span class="token punctuation">.</span><span class="token function">getMsgSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	redisTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token class-name">MessageConfig</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span>cacheMassage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后修改<code>evict</code>方法，同样保持前面的逻辑不变，在最后添加发送消息的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">evict</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 省略前面的不变代码...</span>

    <span class="token comment">//发送信息通知其他节点删除一级缓存   </span>
    <span class="token class-name">CacheMassage</span> cacheMassage
            <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheMassage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheName<span class="token punctuation">,</span> <span class="token class-name">CacheMsgType</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">,</span>
            key<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">MessageSourceUtil</span><span class="token punctuation">.</span><span class="token function">getMsgSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token class-name">MessageConfig</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span>cacheMassage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>适配分布式环境的改造工作到此结束，下面进行一下简单的测试工作。</p><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3><p>我们可以用<code>idea</code>的<code>Allow parallel run</code>功能同时启动两个一样的springboot项目，来模拟分布式环境下的两台主机，注意在启动参数中添加<code>-Dserver.port</code>参数来启动到不同端口。</p><p>首先测试更新操作，使用接口修改某一个主机的本地缓存，可以看到发出消息的主机在收到消息后，直接丢弃不做任何处理：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad81454b8ccb46bbbf27d9955d1cc953~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看另一台主机的日志，收到消息并更新了本地缓存：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb684b0ca143429bbf37f5de4e723113~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>再看一下缓存的删除情况，同样本地删除后再收到消息不做处理：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bdf99afa04f4dbdacea7459ef8c2f8c~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>看另一台主机收到消息后，会删除本地的一级缓存：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9aeed5977a184700954cd7863fcad813~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，分布式环境下本地缓存通过<code>Redis</code>消息的发布订阅机制保证了一级缓存的一致性。</p><p>另外，如果更加严谨一些的话，其实还应该处理一下缓存更新失败的情况，这里留个坑以后再填。简单说一下思路，我们应该在代码中捕获缓存更新失败的异常，然后删除二级缓存、本机以及其他主机的一级缓存，再等待下一次访问时直接拉取最新的数据进行缓存。同样，要想实现缓存失效同时作用于所有单机节点的本地缓存这一功能，也可以使用上面的发布订阅来实现。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>好了，这次缝缝补补的填坑之旅到这里就要结束了。可以看到使用基于<code>JSR107</code>规范的spring接口进行修改后，代码看起来舒服了很多，并且支持直接使用spring的<code>@Cache</code>相关注解。如果想在项目中使用的话，自己封装一个简单的<code>starter</code>就可以了，使用起来也非常简单。</p><p>那么，这次的分享就到这里，我是Hydra，下篇文章再见。</p>`,98),d=n("p",null,[s("本文及上一篇文章的示例代码已合并上传到了Hydra的"),n("strong",null,"Github"),s("上，依旧可以自取~")],-1),r=n("p",null,"Git地址:",-1),v={href:"https://github.com/trunks2008/double-cache",target:"_blank",rel:"noopener noreferrer"};function m(b,g){const a=i("ExternalLinkIcon");return p(),t("div",null,[c(" more "),k,n("blockquote",null,[d,r,n("p",null,[n("a",v,[s("https://github.com/trunks2008/double-cache"),o(a)])])])])}const h=e(u,[["render",m],["__file","SpringImplementCaffeinePlusRedis.html.vue"]]);export{h as default};
