import{_ as p,W as e,X as o,$ as c,Y as n,a0 as s,a1 as t,Z as l,C as u}from"./framework-9e67db09.js";const i={},k=l(`<p>在编程语言的这个圈子里，各种语言之间的对比似乎就一直就没有停过，像什么古早时期的&quot;<strong>PHP是世界上最好的语言</strong>&quot;就不提了，最近我在摸鱼的时候，看到不少文章都在说&quot;<strong>Golang性能吊打Java</strong>&quot;。作为一个写了好几年java的javaer，这我怎么能忍？于是在网上看了一些对比golang和java的文章，其中戳中java痛点、也是golang被吹上天的一条，就是对多线程并发的支持了。先看一段描述：</p><blockquote><p>Go从语言层面原生支持并发，并且使用简单，Go语言中的并发基于轻量级线程<code>Goroutine</code>，创建成本很低，单个Go应用也可以充分利用CPU多核，编写高并发服务端软件简单，执行性能好，很多情况下完全不需要考虑锁机制以及由此带来的各种问题。</p></blockquote><p>看到这，我的心瞬间凉了大半截，真的是字字扎心。虽然说java里的<code>JUC</code>包已经帮我们封装好了很多并发工具，但实际高并发的环境中我们还要考虑到各种锁的使用，以及服务器性能瓶颈、限流熔断等非常多方面的问题。</p><p>再说回go，前面提到的这个<code>goroutine</code>究竟是什么东西？其实，轻量级线程<code>goroutine</code>也可以被称为<strong>协程</strong>，得益于go中的调度器以及GMP模型，go程序会智能地将<code>goroutine</code>中的任务合理地分配给每个 CPU。</p><p>好了，其实上面说的这一大段我也不懂，都是向写go的哥们儿请教来的，总之就是go的并发性能非常优秀就是了。不过这都不是我们要说的重点，今天我们要讨论的是如何在Java中使用协程。</p><h2 id="协程是什么" tabindex="-1"><a class="header-anchor" href="#协程是什么" aria-hidden="true">#</a> 协程是什么？</h2><p>我们知道，线程在阻塞状态和可运行状态的切换，以及线程间的上下文切换都会造成性能的损耗。为了解决这些问题，引入协程<code>coroutine</code>这一概念，就像在一个进程中允许存在多个线程，在一个线程中，也可以存在多个协程。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1900651ee17b46bf9d9885556835b4d1~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那么，使用协程究竟有什么好处呢？</p><p>首先，执行效率高。线程的切换由操作系统内核执行，消耗资源较多。而协程由程序控制，在用户态执行，不需要从用户态切换到内核态，我们也可以理解为，协程是一种进程自身来调度任务的调度模式，因此协程间的切换开销远小于线程切换。</p><p>其次，节省资源。因为协程在本质上是通过分时复用了一个单线程，因此能够节省一定的资源。</p><p>类似于线程的五种状态切换，协程间也存在状态的切换，下面这张图展示了协程调度器内部任务的流转。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9f1def37e2e41f7b9cef55645ef73e2~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>综合上面这些角度来看，和原生支持协程的go比起来，java在多线程并发上还真的是不堪一击。但是，虽然在Java官方的jdk中不能直接使用协程，但是，有其他的开源框架借助动态修改字节码的方式实现了协程，就比如我们接下来要学习的Quasar。</p><h2 id="quasar使用" tabindex="-1"><a class="header-anchor" href="#quasar使用" aria-hidden="true">#</a> Quasar使用</h2><p>Quasar是一个开源的Java协程框架，通过利用<code>Java instrument</code>技术对字节码进行修改，使方法挂起前后可以保存和恢复jvm栈帧，方法内部已执行到的字节码位置也通过增加状态机的方式记录，在下次恢复执行可直接跳转至最新位置。</p><p>Quasar项目最后更新时间为2018年，版本停留在<code>0.8.0</code>，但是我在直接使用这个版本时报了一个错误：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ab4271c898f4d17ab5651baace4c3c2~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个错误的大意就是这个class文件是使用的高版本jdk编译的，所以你在低版本的jdk上当然无法运行了。这里<code>major</code>版本号54对应的是<code>jdk10</code>，而我使用的是<code>jdk8</code>，无奈降级试了一下低版本，果然<code>0.7.10</code>可以使用：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>co.paralleluniverse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>quasar-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.7.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们做好准备工作后，下面就写几个例子来感受一下协程的魅力吧。</p><h3 id="_1、运行时间" tabindex="-1"><a class="header-anchor" href="#_1、运行时间" aria-hidden="true">#</a> 1、运行时间</h3><p>下面我们模拟一个简单的场景，假设我们有一个任务，平均执行时间为1秒，分别测试一下使用线程和协程并发执行10000次需要消耗多少时间。</p><p>先通过线程进行调用，直接使用<code>Executors</code>线程池：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">CountDownLatch</span> countDownLatch<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ExecutorService</span> executor<span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Thread use:&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot; ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看运行时间：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f902d70e199046cfb2703dbadb87aa31~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>好了，下面我们再用Quasar中的协程跑一下和上面相同的流程。这里我们要使用的是Quasar中的<code>Fiber</code>，它可以被翻译为<strong>协程</strong>或<strong>纤程</strong>，创建<code>Fiber</code>的类型主要可分为下面两类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Fiber</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">FiberScheduler</span> scheduler<span class="token punctuation">,</span> <span class="token keyword">int</span> stackSize<span class="token punctuation">,</span> <span class="token class-name">SuspendableRunnable</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">Fiber</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">FiberScheduler</span> scheduler<span class="token punctuation">,</span> <span class="token keyword">int</span> stackSize<span class="token punctuation">,</span> <span class="token class-name">SuspendableCallable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>Fiber</code>中可以运行无返回值的<code>SuspendableRunnable</code>或有返回值的<code>SuspendableCallable</code>，看这个名字也知道区别就是java中的<code>Runnable</code>和<code>Callable</code>的区别了。其余参数都可以省略，<code>name</code>为协程的名称，<code>scheduler</code>是调度器，默认使用<code>FiberForkJoinScheduler</code>，<code>stackSize</code>指定用于保存fiber调用栈信息的<code>stack</code>大小。</p><p>在下面的代码中，使用了<code>Fiber.sleep()</code>方法进行协程的休眠，和<code>Thread.sleep()</code>非常类似。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">CountDownLatch</span> countDownLatch<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Fiber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SuspendableRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SuspendExecution</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
                <span class="token class-name">Fiber</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Fiber use:&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot; ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接运行，报了一个警告：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>QUASAR WARNING: Quasar Java Agent isn&#39;t running. If you&#39;re using another instrumentation method you can ignore this message; otherwise, please refer to the Getting Started section in the Quasar documentation.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还记得我们前面说过的Quasar生效的原理是基于<code>Java instrument</code>技术吗，所以这里需要给它添加一个代理Agent。找到本地maven仓库中已经下好的jar包，在<code>VM options</code>中添加参数：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>-javaagent:E:\\Apache\\maven-repository\\co\\paralleluniverse\\quasar-core\\0.7.10\\quasar-core-0.7.10.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这次运行时就没有提示警告了，查看一下运行时间：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/290522765b964d99ba069368e5c5d858~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>运行时间只有使用线程池时的一半多一点，确实能大大缩短程序的效率。</p><h3 id="_2、内存占用" tabindex="-1"><a class="header-anchor" href="#_2、内存占用" aria-hidden="true">#</a> 2、内存占用</h3><p>在测试完运行时间后，我们再来测试一下运行内存占用的对比。通过下面代码尝试在本地启动100万个线程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本来以为会报<code>OutOfMemoryError</code>，但是没想到的是我的电脑直接直接卡死了…而且不是一次，试了几次都是以卡死只能重启电脑而结束。好吧，我选择放弃，那么下面再试试启动100万个<code>Fiber</code>协程。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">CountDownLatch</span> countDownLatch<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Fiber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SuspendableCallable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">Fiber</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> finalI<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序能够正常执行结束，看样子使用的内存真的比线程少很多。上面我故意使每个协程结束的时间拖得很长，这样我们就可以在运行过程中使用Java VisualVM查看内存的占用情况了：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01e3b14081c54059b72e0e3e2edd05c7~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到在使用<code>Fiber</code>的情况下只使用了1G多一点的内存，平均到100万个协程上也就是说每个<code>Fiber</code>只占用了<code>1Kb</code>左右的内存空间，和<code>Thread</code>线程比起来真的是非常的轻量级。</p><p>从上面这张图中我们也可以看到，运行了非常多的<code>ForkJoinPool</code>，它们又起到了什么作用呢？我们在前面说过，协程是由程序控制在用户态进行切换，而Quasar中的调度器就使用了一个或多个<code>ForkJoinPool</code>来完成对<code>Fiber</code>的调度。</p><h3 id="_3、原理与应用" tabindex="-1"><a class="header-anchor" href="#_3、原理与应用" aria-hidden="true">#</a> 3、原理与应用</h3><p>这里简单介绍一下Quasar的原理，在编译时框架会对代码进行扫描，如果方法带有<code>@Suspendable</code>注解，或抛出了<code>SuspendExecution</code>，或在配置文件<code>META-INF/suspendables</code>中指定该方法，那么Quasar就会修改生成的字节码，在<code>park</code>挂起方法的前后，插入一些字节码。</p><p>这些字节码会记录此时协程的执行状态，例如相关的局部变量与操作数栈，然后通过抛出异常的方式将cpu的控制权从当前协程交回到控制器，此时控制器可以再调度另外一个协程运行，并通过之前插入的那些字节码恢复当前协程的执行状态，使程序能继续正常执行。</p><p>回头看一下前面例子中的<code>SuspendableRunnable</code>和<code>SuspendableCallable</code>，它们的<code>run</code>方法上都抛出了<code>SuspendExecution</code>，其实这并不是一个真正的异常，仅作为识别挂起方法的声明，在实际运行中不会抛出。当我们创建了一个<code>Fiber</code>，并在其中调用了其他方法时，如果想要Quasar的调度器能够介入，那么必须在使用时层层抛出这个异常或添加注解。</p><p>看一下简单的代码书写的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Fiber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SuspendableRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SuspendExecution</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SuspendExecution</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">realSendRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">realSendRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SuspendExecution</span><span class="token punctuation">{</span>
    <span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:6879/name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> content <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> content<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，如果在方法内部已经通过try/catch的方式捕获了<code>Exception</code>，也应该再次手动抛出这个<code>SuspendExecution</code>异常。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文介绍了Quasar框架的简单使用，其具体的实现原理比较复杂，暂时就不在这里进行讨论，后面打算单独拎出来进行分析。另外，目前已经有不少其他的框架中已经集成了Quasar，例如同样是<code>Parallel Universe</code>下的Comsat项目，能够提供了HTTP和DB访问等功能。</p><p>虽然现在想要在Java中使用协程还只能使用这样的第三方的框架，但是也不必灰心，在OpenJDK 16中已经加入了一个名为<code>Project Loom</code>的项目， 在<code>OpenJDK Wiki</code>上可以看到对它的介绍，它将使用<code>Fiber</code>轻量级用户模式线程，从jvm层面对多线程技术进行彻底的改变，使用新的编程模型，使轻量级线程的并发也能够适用于高吞吐量的业务场景。</p><p>Quasar和Loom的相关的文档放在下面，有兴趣的小伙伴们可以自己看一下。</p>`,59),r={href:"https://github.com/puniverse/quasar",target:"_blank",rel:"noopener noreferrer"},d={href:"http://docs.paralleluniverse.co/quasar/javadoc/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://wiki.openjdk.java.net/display/loom/Main",target:"_blank",rel:"noopener noreferrer"};function m(b,g){const a=u("ExternalLinkIcon");return e(),o("div",null,[c(" more "),k,n("blockquote",null,[n("p",null,[s("Quasar git："),n("a",r,[s("https://github.com/puniverse/quasar"),t(a)])]),n("p",null,[s("Quasar api："),n("a",d,[s("http://docs.paralleluniverse.co/quasar/javadoc/"),t(a)])]),n("p",null,[s("OpenJdk Wiki："),n("a",v,[s("https://wiki.openjdk.java.net/display/loom/Main"),t(a)])])])])}const h=p(i,[["render",m],["__file","JavaQuasar.html.vue"]]);export{h as default};
