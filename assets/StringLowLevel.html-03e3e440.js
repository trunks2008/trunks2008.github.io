import{_ as t,W as p,X as o,$ as c,Y as n,a0 as a,a1 as e,Z as l,C as i}from"./framework-9e67db09.js";const u={},d=l(`<p>String字符串是我们日常工作中常用的一个类，在面试中也是高频考点，这里Hydra精心总结了一波常见但也有点烧脑的String面试题，一共5道题，难度从简到难，来一起来看看你能做对几道吧。</p><blockquote><p>本文基于<strong>jdk8</strong>版本中的String进行讨论，文章例子中的代码运行结果基于<code>Java 1.8.0_261-b12</code></p></blockquote><h2 id="第1题-奇怪的-nullnull" tabindex="-1"><a class="header-anchor" href="#第1题-奇怪的-nullnull" aria-hidden="true">#</a> 第1题，奇怪的 nullnull</h2><p>下面这段代码最终会打印什么？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> s1<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> s2<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s<span class="token operator">=</span> s1<span class="token operator">+</span>s2<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>揭晓答案，看一下运行结果，打印了<code>nullnull</code>：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f534d5af0d1c461e91d1baaf14abd9c9~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在分析这个结果之前，先扯点别的，说一下为空<code>null</code>的字符串的打印原理。查看一下<code>PrintStream</code>类的源码，<code>print</code>方法在打印<code>null</code>前进行了处理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s <span class="token operator">=</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，一个为<code>null</code>的字符串就可以被打印在我们的控制台上了。</p><p>再回头看上面这道题，<code>s1</code>和<code>s2</code>没有经过初始化所以都是空对象<code>null</code>，需要注意这里不是字符串的<code>&quot;null&quot;</code>，打印结果的产生我们可以看一下字节码文件：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/508d0ad9ed4147c29b3aac7d6dfaaa28~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>编译器会对<code>String</code>字符串相加的操作进行优化，会把这一过程转化为<code>StringBuilder</code>的<code>append</code>方法。那么，让我们再看看<code>append</code>方法的源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">appendNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>append</code>方法的参数字符串为<code>null</code>，那么这里会调用其父类<code>AbstractStringBuilder</code>的<code>appendNull</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token function">appendNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> count<span class="token punctuation">;</span>
    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    value<span class="token punctuation">[</span>c<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;n&#39;</span><span class="token punctuation">;</span>
    value<span class="token punctuation">[</span>c<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;u&#39;</span><span class="token punctuation">;</span>
    value<span class="token punctuation">[</span>c<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">;</span>
    value<span class="token punctuation">[</span>c<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">;</span>
    count <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>value</code>就是底层用来存储字符的<code>char</code>类型数组，到这里我们就可以明白了，其实<code>StringBuilder</code>也对<code>null</code>的字符串进行了特殊处理，在<code>append</code>的过程中如果碰到是<code>null</code>的字符串，那么就会以<code>&quot;null&quot;</code>的形式被添加进字符数组，这也就导致了两个为空<code>null</code>的字符串相加后会打印为<code>&quot;nullnull&quot;</code>。</p><h2 id="第2题-改变string的值" tabindex="-1"><a class="header-anchor" href="#第2题-改变string的值" aria-hidden="true">#</a> 第2题，改变String的值</h2><p>如何改变一个String字符串的值，这道题可能看上去有点太简单了，像下面这样直接<em>赋值</em>不就可以了吗？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">;</span>
s<span class="token operator">=</span><span class="token string">&quot;Trunks&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>恭喜你，成功掉进了坑里！在回答这道题之前，我们需要知道String是<strong>不可变</strong>的，打开String的源码在开头就可以看到：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到，String的本质其实是一个<code>char</code>类型的数组，然后我们再看两个关键字。先看<code>final</code>，我们知道<code>final</code>在修饰引用数据类型时，就像这里的数组时，能够保证指向该数组地址的引用不能修改，但是数组本身内的值可以被修改。</p><p>是不是有点晕，没关系，我们看一个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> one<span class="token operator">=</span><span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> two<span class="token operator">=</span><span class="token punctuation">{</span><span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;f&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
one<span class="token operator">=</span>two<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你这样写，那么编译器是会报错提示<code>Cannot assign a value to final variable &#39;one&#39;</code>，说明被<code>final</code>修饰的数组的引用地址是不可改变的。但是下面这段代码却能够正常的运行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> one<span class="token operator">=</span><span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;z&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，即使被<code>final</code>修饰，但是我直接操作数组里的元素还是可以的，所以这里还加了另一个关键字<code>private</code>，防止从外部进行修改。此外，String类本身也被添加了<code>final</code>关键字修饰，防止被继承后对属性进行修改。</p><p>到这里，我们就可以理解为什么String是不可变的了，那么在上面的代码进行<em>二次赋值</em>的过程中，发生了什么呢？答案很简单，前面的变量<code>s</code>只是一个String对象的引用，这里的重新赋值时将变量<code>s</code>指向了新的对象。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d776ae02a0594c4d89ac547c539318b1~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面白话了一大顿，其实是我们可以通过比较<code>hashCode</code>的方式来看一下引用指向的对象是否发生了改变，修改一下上面的代码，打印字符串的<code>hashCode</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token string">&quot;:  &quot;</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token operator">=</span><span class="token string">&quot;Trunks&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token string">&quot;: &quot;</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看结果，发生了改变，证明指向的对象发生了改变：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/873be83c41ff4d1296a32b3ac48a0545~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那么，回到上面的问题，如果我想要改变一个String的值，而又不想把它重新指向其他对象的话，应该怎么办呢？答案是利用反射修改<code>char</code>数组的值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token string">&quot;:  &quot;</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token char">&#39;T&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;u&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;n&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;k&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;s&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token string">&quot;: &quot;</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再对比一下<code>hashCode</code>，修改后和之前一样，对象没有发生任何变化：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d4880a1a6fa40a286a48887e1365af6~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后，再啰嗦说一点题外话，这里看的是<code>jdk8</code>中String的源码，到这为止还是使用的<code>char</code>类型数组来存储字符，但是在<code>jdk9</code>中这个<code>char</code>数组已经被替换成了<code>byte</code>数组，能够使String对象占用的内存减少。</p><h2 id="第3题-创建了几个对象" tabindex="-1"><a class="header-anchor" href="#第3题-创建了几个对象" aria-hidden="true">#</a> 第3题，创建了几个对象？</h2><p>相信不少小伙伴在面试中都遇到过这道经典面试题，下面这段代码中到底<strong>创建</strong>了几个对象？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其实真正想要回答好这个问题，要铺垫的知识点还真是不少。首先，我们需要了解3个关于<strong>常量池</strong>的概念，下面还是基于<code>jdk8</code>版本进行说明：</p><ul><li>class文件常量池：在class文件中保存了一份常量池（<code>Constant Pool</code>），主要存储编译时确定的数据，包括代码中的<strong>字面量</strong>(<code>literal</code>)和<strong>符号引用</strong></li><li>运行时常量池：位于方法区中，全局共享，class文件常量池中的内容会在类加载后存放到方法区的运行时常量池中。除此之外，在运行期间可以将新的变量放入运行时常量池中，相对class文件常量池而言运行时常量池更具备动态性</li><li>字符串常量池：位于堆中，全局共享，这里可以先粗略的认为它存储的是String对象的<strong>直接引用</strong>，而不是直接存放的对象，具体的实例对象是在堆中存放</li></ul><p>可以用一张图来描述它们各自所处的位置：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/770c03d929724f15a985a9306264e027~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来，我们来细说一下<strong>字符串常量池</strong>的结构，其实在Hotspot JVM中，字符串常量池<code>StringTable</code>的本质是一张<code>HashTable</code>，那么当我们说将一个字符串放入字符串常量池的时候，实际上放进去的是什么呢？</p><p>以字面量的方式创建String对象为例，字符串常量池以及堆栈的结构如下图所示（忽略了jvm中的各种<code>OopDesc</code>实例）：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/337106a6f0ad4c6987929e2cb6d8bc24~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>实际上字符串常量池<code>HashTable</code>采用的是<strong>数组</strong>加<strong>链表</strong>的结构，链表中的节点是一个个的<code>HashTableEntry</code>，而<code>HashTableEntry</code>中的<code>value</code>则存储了堆上String对象的<strong>引用</strong>。</p><p>那么，下一个问题来了，这个字符串对象的引用是<strong>什么时候</strong>被放到字符串常量池中的？具体可为两种情况：</p><ul><li>使用字面量声明String对象时，也就是被双引号包围的字符串，在堆上创建对象，并<strong>驻留</strong>到字符串常量池中（注意这个用词）</li><li>调用<code>intern()</code>方法，当字符串常量池没有相等的字符串时，会保存该字符串的引用</li></ul><p><strong>注意！<strong>我们在上面用到了一个词</strong>驻留</strong>，这里对它进行一下规范。当我们说驻留一个字符串到字符串常量池时，指的是创建<code>HashTableEntry</code>，再使它的<code>value</code>指向堆上的String实例，并把<code>HashTableEntry</code>放入字符串常量池，而不是直接把String对象放入字符串常量池中。简单来说，可以理解为将String对象的引用保存在字符串常量池中。</p><p>我们把<code>intern()</code>方法放在后面细说，先主要看第一种情况，这里直接整理引用R大的结论：</p><blockquote><p>在类加载阶段，JVM会在堆中创建对应这些class文件常量池中的字符串对象实例，并在字符串常量池中驻留其引用。</p><p>这一过程具体是在resolve阶段(个人理解就是resolution解析阶段)执行，但是并不是立即就创建对象并驻留了引用，因为在JVM规范里指明了resolve阶段可以是lazy的。CONSTANT_String会在第一次引用该项的ldc指令被第一次执行到的时候才会resolve。</p><p>就HotSpot VM的实现来说，加载类时字符串字面量会进入到运行时常量池，不会进入全局的字符串常量池，即在StringTable中并没有相应的引用，在堆中也没有对应的对象产生。</p></blockquote><p>这里大家可以暂时先记住这个结论，在后面还会用到。</p><p>在弄清楚上面几个概念后，我们再回过头来，先看看用<strong>字面量</strong>声明String的方式，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反编译生成的字节码文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>public static void main<span class="token punctuation">(</span>java.lang.String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  descriptor: <span class="token punctuation">(</span><span class="token punctuation">[</span>Ljava/lang/String<span class="token punctuation">;</span><span class="token punctuation">)</span>V
  flags: ACC_PUBLIC, ACC_STATIC
  Code:
    <span class="token assign-left variable">stack</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">locals</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">args_size</span><span class="token operator">=</span><span class="token number">1</span>
       <span class="token number">0</span>: ldc           <span class="token comment">#2                  // String Hydra</span>
       <span class="token number">2</span>: astore_1
       <span class="token number">3</span>: <span class="token builtin class-name">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释一下上面的字节码指令：</p><ul><li><code>0: ldc</code>，查找后面索引为<code>#2</code>对应的项，<code>#2</code>表示常量在常量池中的位置。在这个过程中，会触发前面提到的<strong>lazy resolve</strong>，在resolve过程如果发现<code>StringTable</code>已经有了内容匹配的String引用，则直接返回这个引用，反之如果<code>StringTable</code>里没有内容匹配的String对象的引用，则会在堆里创建一个对应内容的String对象，然后在<code>StringTable</code>驻留这个对象引用，并返回这个引用，之后再压入操作数栈中</li><li><code>2: astore_1</code>，弹出栈顶元素，并将栈顶引用类型值保存到局部变量1中，也就是保存到变量<code>s</code>中</li><li><code>3: return</code>，执行<code>void</code>函数返回</li></ul><p>可以看到，在这种模式下，只有堆中创建了一个<code>&quot;Hydra&quot;</code>对象，在字符串常量池中驻留了它的引用。并且，如果再给字符串<code>s2</code>、<code>s3</code>也用字面量的形式赋值为<code>&quot;Hydra&quot;</code>，它们用的都是堆中的唯一这一个对象。</p><p>好了，再看一下以构造方法的形式创建字符串的方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样反编译这段代码的字节码文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>public static void main<span class="token punctuation">(</span>java.lang.String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  descriptor: <span class="token punctuation">(</span><span class="token punctuation">[</span>Ljava/lang/String<span class="token punctuation">;</span><span class="token punctuation">)</span>V
  flags: ACC_PUBLIC, ACC_STATIC
  Code:
    <span class="token assign-left variable">stack</span><span class="token operator">=</span><span class="token number">3</span>, <span class="token assign-left variable">locals</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">args_size</span><span class="token operator">=</span><span class="token number">1</span>
       <span class="token number">0</span>: new           <span class="token comment">#2                  // class java/lang/String</span>
       <span class="token number">3</span>: dup
       <span class="token number">4</span>: ldc           <span class="token comment">#3                  // String Hydra</span>
       <span class="token number">6</span>: invokespecial <span class="token comment">#4                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span>
       <span class="token number">9</span>: astore_1
      <span class="token number">10</span>: <span class="token builtin class-name">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看一下和之前不同的字节码指令部分：</p><ul><li><code>0: new</code>，在堆上创建一个String对象，并将它的引用压入操作数栈，注意这时的对象还只是一个空壳，并没有调用类的构造方法进行初始化</li><li><code>3: dup</code>，复制栈顶元素，也就是复制了上面的对象引用，并将复制后的对象引用压入栈顶。这里之所以要进行复制，是因为之后要执行的构造方法会从操作数栈弹出需要的参数和这个对象引用本身（这个引用起到的作用就是构造方法中的<code>this</code>指针），如果不进行复制，在弹出后会无法得到初始化后的对象引用</li><li><code>4: ldc</code>，在堆上创建字符串对象，驻留到字符串常量池，并将字符串的引用压入操作数栈</li><li><code>6: invokespecial</code>，执行String的构造方法，这一步执行完成后得到一个完整对象</li></ul><p>到这里，我们可以看到一共创建了<strong>两个</strong>String对象，并且两个都是在堆上创建的，且字面量方式创建的String对象的引用被驻留到了字符串常量池中。而栈里的<code>s</code>只是一个变量，并不是实际意义上的对象，我们不把它包括在内。</p><p>其实想要验证这个结论也很简单，可以使用idea中强大的debug功能来直观的对比一下对象数量的变化，先看字面量创建String方式：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d981407a7cc04b1ea9f27d117e8e197d~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个对象数量的计数器是在debug时，点击下方右侧<code>Memory</code>的<code>Load classes</code>弹出的。对比语句执行前后可以看到，只创建了一个String对象，以及一个char数组对象，也就是String对象中的<code>value</code>。</p><p>再看看构造方法创建String的方式：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7ded2b2365f43ab87a92b43e63eb52f~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，创建了两个String对象，一个char数组对象，也说明了两个String中的<code>value</code>指向了同一个char数组对象，符合我们上面从字节码指令角度解释的结果。</p><p>最后再看一下下面的这种情况，当字符串常量池已经驻留过某个字符串引用，再使用构造方法创建String时，创建了几个对象？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案是<strong>只创建一个对象</strong>，对于这种重复字面量的字符串，看一下反编译后的字节码指令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Code:
  <span class="token assign-left variable">stack</span><span class="token operator">=</span><span class="token number">3</span>, <span class="token assign-left variable">locals</span><span class="token operator">=</span><span class="token number">3</span>, <span class="token assign-left variable">args_size</span><span class="token operator">=</span><span class="token number">1</span>
     <span class="token number">0</span>: ldc           <span class="token comment">#2                  // String Hydra</span>
     <span class="token number">2</span>: astore_1
     <span class="token number">3</span>: new           <span class="token comment">#3                  // class java/lang/String</span>
     <span class="token number">6</span>: dup
     <span class="token number">7</span>: ldc           <span class="token comment">#2                  // String Hydra</span>
     <span class="token number">9</span>: invokespecial <span class="token comment">#4                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span>
    <span class="token number">12</span>: astore_2
    <span class="token number">13</span>: <span class="token builtin class-name">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到两次执行<code>ldc</code>指令时后面索引相同，而<code>ldc</code>判断是否需要创建新的String实例的依据是根据在第一次执行这条指令时，<code>StringTable</code>是否已经保存了一个对应内容的String实例的引用。所以在第一次执行<code>ldc</code>时会创建String实例，而在第二次<code>ldc</code>就会直接返回而不需要再创建实例了。</p><h2 id="第4题-烧脑的-intern" tabindex="-1"><a class="header-anchor" href="#第4题-烧脑的-intern" aria-hidden="true">#</a> 第4题，烧脑的 intern</h2><p>上面我们在研究字符串对象的引用如何驻留到字符串常量池中时，还留下了调用<code>intern</code>方法的方式，下面我们来具体分析。</p><p>从字面上理解<code>intern</code>这个单词，作为动词时它有<strong>禁闭</strong>、<strong>关押</strong>的意思，通过前面的介绍，与其说是将字符串关押到字符串常量池<code>StringTable</code>中，可能将它理解为<strong>缓存它的引用</strong>会更加贴切。</p><p>String的<code>intern()</code>是一个本地方法，可以强制将String驻留进入字符串常量池，可以分为两种情况：</p><ul><li>如果字符串常量池中已经驻留了一个等于此String对象内容的字符串引用，则返回此字符串在常量池中的引用</li><li>否则，在常量池中创建一个引用指向这个String对象，然后返回常量池中的这个引用</li></ul><p>好了，我们下面看一下这段代码，它的运行结果应该是什么？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> <span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出打印：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>false
false
true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用一张图来描述它们的关系，就很容易明白了：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d643f5e512344128f9801e13e9aade7~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其实有了第三题的基础，了解这个结构已经很简单了：</p><ul><li>在创建<code>s1</code>的时候，其实堆里已经创建了两个字符串对象<code>StringObject1</code>和<code>StringObject2</code>，并且在字符串常量池中驻留了<code>StringObject2</code></li><li>当执行<code>s1.intern()</code>方法时，字符串常量池中已经存在内容等于<code>&quot;Hydra&quot;</code>的字符串<code>StringObject2</code>，直接返回这个引用并赋值给<code>s2</code></li><li><code>s1</code>和<code>s2</code>指向的是两个不同的String对象，因此返回 fasle</li><li><code>s2</code>指向的就是驻留在字符串常量池的<code>StringObject2</code>，因此<code>s2==&quot;Hydra&quot;</code>为 true，而<code>s1</code>指向的不是常量池中的对象引用所以返回false</li></ul><p>上面是常量池中已存在内容相等的字符串驻留的情况，下面再看看常量池中不存在的情况，看下面的例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hy&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;dra&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>简单分析一下这个过程，第一步会在堆上创建<code>&quot;Hy&quot;</code>和<code>&quot;dra&quot;</code>的字符串对象，并驻留到字符串常量池中。</p><p>接下来，完成字符串的拼接操作，前面我们说过，实际上jvm会把拼接优化成<code>StringBuilder</code>的<code>append</code>方法，并最终调用<code>toString</code>方法返回一个String对象。在完成字符串的拼接后，字符串常量池中并没有驻留一个内容等于<code>&quot;Hydra&quot;</code>的字符串。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/491ac355ccab4ff5bafeb7c19c25ac99~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以，执行<code>s1.intern()</code>时，会在字符串常量池创建一个引用，指向前面<code>StringBuilder</code>创建的那个字符串，也就是变量<code>s1</code>所指向的字符串对象。在《深入理解Java虚拟机》这本书中，作者对这进行了解释，因为从jdk7开始，字符串常量池就已经移到了堆中，那么这里就只需要在字符串常量池中记录一下首次出现的实例引用即可。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb5500e4e6ce4e90ae9208aeda13e530~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后，当执行<code>String s2 = &quot;Hydra&quot;</code>时，发现字符串常量池中已经驻留这个字符串，直接返回对象的引用，因此<code>s1</code>和<code>s2</code>指向的是相同的对象。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c326575da9804575a3d7be25efa0859b~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="第5题-还是创建了几个对象" tabindex="-1"><a class="header-anchor" href="#第5题-还是创建了几个对象" aria-hidden="true">#</a> 第5题，还是创建了几个对象？</h2><p>解决了前面数String对象个数的问题，那么我们接着加点难度，看看下面这段代码，创建了几个对象？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">&quot;a&quot;</span><span class="token operator">+</span><span class="token string">&quot;b&quot;</span><span class="token operator">+</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>先揭晓答案，<strong>只创建了一个对象！</strong> 可以直观的对比一下源代码和反编译后的字节码文件：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b2d4245258f435d93fb2f73e6dd2330~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果使用前面提到过的debug小技巧，也可以直观的看到语句执行完后，只增加了一个String对象，以及一个char数组对象。并且这个字符串就是驻留在字符串常量池中的那一个，如果后面再使用字面量<code>&quot;abc&quot;</code>的方式声明一个字符串，指向的仍是这一个，堆中String对象的数量不会发生变化。</p><p>至于为什么源代码中字符串拼接的操作，在编译完成后会消失，直接呈现为一个拼接后的完整字符串，是因为在编译期间，应用了编译器优化中一种被称为<strong>常量折叠</strong>(Constant Folding)的技术。</p><blockquote><p>常量折叠会将<strong>编译期常量</strong>的加减乘除的运算过程在编译过程中折叠。编译器通过语法分析，会将常量表达式计算求值，并用求出的值来替换表达式，而不必等到运行期间再进行运算处理，从而在运行期间节省处理器资源。</p></blockquote><p>而上边提到的编译期常量的特点就是它的值在编译期就可以确定，并且需要完整满足下面的要求，才可能是一个编译期常量：</p><ul><li>被声明为<code>final</code></li><li>基本类型或者字符串类型</li><li>声明时就已经初始化</li><li>使用<strong>常量表达式</strong>进行初始化</li></ul><p>下面我们通过几段代码加深对它的理解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> h1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> h2 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s1 <span class="token operator">=</span> h1 <span class="token operator">+</span> <span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s2 <span class="token operator">=</span> h2 <span class="token operator">+</span> <span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> <span class="token string">&quot;helloHydra&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string">&quot;helloHydra&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>true
false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码中字符串<code>h1</code>和<code>h2</code>都使用常量赋值，区别在于是否使用了<code>final</code>进行修饰，对比编译后的代码，<code>s1</code>进行了折叠而<code>s2</code>没有，可以印证上面的理论，<code>final</code>修饰的字符串变量才有可能是编译期常量。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/265fc22d136f433c817d0f9e22fd5943~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>再看一段代码，执行下面的程序，结果会返回什么呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> h <span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> h2 <span class="token operator">=</span> h<span class="token punctuation">;</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> h2 <span class="token operator">+</span> <span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token string">&quot;helloHydra&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案是<code>false</code>，因为虽然这里字符串<code>h2</code>被<code>final</code>修饰，但是初始化时没有使用常量表达式，因此它也不是编译期常量。那么，有的小伙伴就要问了，到底什么才是常量表达式呢？</p><p>在<code>Oracle</code>官网的文档中，列举了很多种情况，下面对常见的情况进行列举（除了下面这些之外官方文档上还列举了不少情况，如果有兴趣的话，可以自己查看）：</p><ul><li>基本类型和String类型的字面量</li><li>基本类型和String类型的强制类型转换</li><li>使用<code>+</code>或<code>-</code>或<code>!</code>等一元运算符（不包括<code>++</code>和<code>--</code>）进行计算</li><li>使用加减运算符<code>+</code>、<code>-</code>，乘除运算符<code>*</code>、 <code>/</code> 、<code>%</code> 进行计算</li><li>使用移位运算符 <code>&gt;&gt;</code>、 <code>&lt;&lt;</code>、 <code>&gt;&gt;&gt;</code>进行位移操作</li><li>……</li></ul><p>至于我们从文章一开始就提到的字面量（literals），是用于表达源代码中一个固定值的表示法，在Java中创建一个对象时需要使用<code>new</code>关键字，但是给一个基本类型变量赋值时不需要使用<code>new</code>关键字，这种方式就可以被称为字面量。Java中字面量主要包括了以下类型的字面量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//整数型字面量：</span>
<span class="token keyword">long</span> l<span class="token operator">=</span><span class="token number">1L</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">//浮点类型字面量：</span>
<span class="token keyword">float</span> f<span class="token operator">=</span><span class="token number">11.1f</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d<span class="token operator">=</span><span class="token number">11.1</span><span class="token punctuation">;</span>

<span class="token comment">//字符和字符串类型字面量：</span>
<span class="token keyword">char</span> c<span class="token operator">=</span><span class="token char">&#39;h&#39;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//布尔类型字面量：</span>
<span class="token keyword">boolean</span> b<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再说点题外话，和编译期常量相对的，另一种类型的常量是运行时常量，看一下下面这段代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">&quot;hello &quot;</span><span class="token operator">+</span><span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> s2<span class="token operator">=</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;Hydra&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器能够在编译期就得到<code>s1</code>的值是<code>hello Hydra</code>，不需要等到程序的运行期间，因此<code>s1</code>属于编译期常量。而对<code>s2</code>来说，虽然也被声明为<code>final</code>类型，并且在声明时就已经初始化，但使用的不是常量表达式，因此不属于编译期常量，这一类型的常量被称为<strong>运行时常量</strong>。</p><p>再看一下编译后的字节码文件中的常量池区域：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/320e75fecdbf4a3bbc66e57e4164ae03~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到常量池中只有一个String类型的常量<code>hello Hydra</code>，而<code>s2</code>对应的字符串常量则不在此区域。对编译器来说，运行时常量在编译期间无法进行折叠，编译器只会对尝试修改它的操作进行报错处理。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>最后再强调一下，本文是基于<code>jdk8</code>进行测试，不同版本的<code>jdk</code>可能会有很大差异。例如<code>jdk6</code>之前，字符串常量池存储的是String对象实例，而在<code>jdk7</code>以后字符串常量池就改为存储引用，做了非常大的改变。</p><p>至于最后一题，其实Hydra在以前单独拎出来写过一篇文章，这次总结面试题把它归纳在了里面，省略了一些不重要的部分，大家如果觉得不够详细可以移步看看这篇：<code>String s=&quot;a&quot;+&quot;b&quot;+&quot;c&quot;，到底创建了几个对象？</code></p><p>那么，这次的分享就写到这里，我是Hydra，我们下篇再见~</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料：</h2>`,139),r=n("p",null,"《深入理解Java虚拟机（第三版）》",-1),k={href:"https://www.zhihu.com/question/55994121",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.iteye.com/blog/rednaxelafx-774673#",target:"_blank",rel:"noopener noreferrer"};function g(m,b){const s=i("ExternalLinkIcon");return p(),o("div",null,[c(" more "),d,n("blockquote",null,[r,n("p",null,[n("a",k,[a("https://www.zhihu.com/question/55994121"),e(s)])]),n("p",null,[n("a",v,[a("https://www.iteye.com/blog/rednaxelafx-774673#"),e(s)])])])])}const h=t(u,[["render",g],["__file","StringLowLevel.html.vue"]]);export{h as default};
