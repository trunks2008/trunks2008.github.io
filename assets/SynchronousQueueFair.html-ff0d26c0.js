import{_ as n,W as a,X as s,$ as e,Z as p}from"./framework-9e67db09.js";const o={},t=p(`<p>面试官：呦，小伙子来的挺早啊！</p><p>Hydra：那是，不能让您等太久了啊（别废话了快开始吧，还赶着去下一场呢）。</p><p>面试官：前面两轮表现还不错，那我们今天继续说说队列中的<code>SynchronousQueue</code>吧。</p><p>Hydra：好的，<code>SynchronousQueue</code>和之前介绍过的队列相比，稍微有一些特别，必须等到队列中的元素被消费后，才能继续向其中添加新的元素，因此它也被称为无缓冲的等待队列。</p><p>我还是先写一个例子吧，创建两个线程，生产者线程<code>putThread</code>向<code>SynchronousQueue</code>中放入元素，消费者线程<code>takeThread</code>从中取走元素：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Thread</span> putThread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;put thread put:&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;put thread put:&quot;</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">&quot; awake&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Thread</span> takeThread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            j<span class="token operator">=</span>queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;take from putThread:&quot;</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

putThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
takeThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的代码，查看结果：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">put</span> <span class="token value attr-value">thread put:0</span>
<span class="token key attr-name">take</span> <span class="token value attr-value">from putThread:0</span>
<span class="token key attr-name">put</span> <span class="token value attr-value">thread put:0 awake</span>
<span class="token key attr-name">put</span> <span class="token value attr-value">thread put:1</span>
<span class="token key attr-name">take</span> <span class="token value attr-value">from putThread:1</span>
<span class="token key attr-name">put</span> <span class="token value attr-value">thread put:1 awake</span>
<span class="token key attr-name">put</span> <span class="token value attr-value">thread put:2</span>
<span class="token key attr-name">take</span> <span class="token value attr-value">from putThread:2</span>
<span class="token key attr-name">put</span> <span class="token value attr-value">thread put:2 awake</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，生产者线程在执行<code>put</code>方法后就被阻塞，直到消费者线程执行<code>take</code>方法对队列中的元素进行了消费，生产者线程才被唤醒，继续向下执行。简单来说运行流程是这样的：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ce5daeed22e42b994ac7de7f535ec15~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>面试官：就这？应用谁不会啊，不讲讲底层原理就想蒙混过关？</p><p>Hydra：别急啊，我们先从它的构造函数说起，根据参数不同，<code>SynchronousQueue</code>分为公平模式和非公平模式，默认情况下为非公平模式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">SynchronousQueue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    transferer <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TransferQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">TransferStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先来看看公平模式吧，该模式下底层使用的是<code>TransferQueue</code>队列，内部节点由<code>QNode</code>构成，定义如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">volatile</span> <span class="token class-name">QNode</span> next<span class="token punctuation">;</span>          <span class="token comment">// next node in queue</span>
<span class="token keyword">volatile</span> <span class="token class-name">Object</span> item<span class="token punctuation">;</span>         <span class="token comment">// CAS&#39;ed to or from null</span>
<span class="token keyword">volatile</span> <span class="token class-name">Thread</span> waiter<span class="token punctuation">;</span>       <span class="token comment">// to control park/unpark</span>
<span class="token keyword">final</span> <span class="token keyword">boolean</span> isData<span class="token punctuation">;</span>
<span class="token class-name">QNode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> item<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isData <span class="token operator">=</span> isData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>item</code>用来存储数据，<code>isData</code>用来区分节点是什么类型的线程产生的，<code>true</code>表示是生产者，<code>false</code>表示是消费者，是后面用来进行节点<strong>匹配</strong>（<code>complementary</code> ）的关键。在<code>SynchronousQueue</code>中匹配是一个非常重要的概念，例如一个线程先执行<code>put</code>产生了一个节点放入队列，另一个线程再执行<code>take</code>产生了一个节点，这两个不同类型的节点就可以匹配成功。</p><p>面试官：可是我看很多资料里说<code>SynchronousQueue</code>是一个不存储元素的阻塞队列，这点你是怎么理解的？</p><p>Hydra：通过上面节点中封装的属性，可以看出<code>SynchronousQueue</code>的队列中封装的节点更多针对的不是数据，而是要执行的操作，个人猜测这个说法的出发点就是队列中存储的节点更多偏向于操作这一属性。</p><p>面试官：好吧，接着往下说队列的结构吧。</p><p>Hydra：<code>TransferQueue</code>中主要定义的属性有下面这些：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">QNode</span> head<span class="token punctuation">;</span>
<span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">QNode</span> tail<span class="token punctuation">;</span>
<span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">QNode</span> cleanMe<span class="token punctuation">;</span>
<span class="token class-name">TransferQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">QNode</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QNode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// initialize to dummy node.</span>
    head <span class="token operator">=</span> h<span class="token punctuation">;</span>
    tail <span class="token operator">=</span> h<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比较重要的有头节点<code>head</code>、尾节点<code>tail</code>、以及用于标记下一个要删除的节点的<code>cleanMe</code>节点。在构造函数初始化中创建了一个节点，注释中将它称为<code>dummy node</code>，也就是伪造的节点，它的作用类似于<code>AQS</code>中的头节点的作用，实际操作的节点是它的下一个节点。</p><p>要说<code>SynchronousQueue</code>，真是一个神奇的队列，不管你调用的是<code>put</code>和<code>offer</code>，还是<code>take</code>和<code>poll</code>，它都一概交给核心的<code>transfer</code>方法去处理，只不过参数不同。今天我们抛弃源码，通过画图对它进行分析，首先看一下方法的定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">E</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>面试官：呦呵，就一个方法？我倒要看看它是怎么区分实现的入队和出队操作…</p><p>Hydra：在方法的参数中，<code>timed</code>和<code>nanos</code>用于标识调用<code>transfer</code>的方法是否是能够超时退出的，而<code>e</code>是否为空则可以说明是生产者还是消费者调用的此方法。如果<code>e</code>不为<code>null</code>，是生产者调用，如果<code>e</code>为<code>null</code>则是消费者调用。方法的整体逻辑可以分为下面几步：</p><p><strong>1</strong>、若队列为空，或队列中的尾节点类型和自己的类型相同，那么准备封装一个新的<code>QNode</code>添加到队列中。在添加新节点到队尾的过程中，并没有使用<code>synchronized</code>或<code>ReentrantLock</code>，而是通过<code>CAS</code>来保证线程之间的同步。</p><p>在添加新的<code>QNode</code>到队尾前，会首先判断之前取到的尾节点是否发生过改变，如果有改变的话那么放弃修改，进行自旋，在下一次循环中再次判断。当检查队尾节点没有发生改变后，构建新的节点<code>QNode</code>，并将它添加到队尾。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/463f3b5022334287a32ea816c36942ab~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>2</strong>、当新节点被添加到队尾后，会调用<code>awaitFulfill</code>方法，会根据传递的参数让线程进行自旋或直接挂起。方法的定义如下，参数中的<code>timed</code>为<code>true</code>时，表示这是一个有等待超时的方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> <span class="token function">awaitFulfill</span><span class="token punctuation">(</span><span class="token class-name">QNode</span> s<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>awaitFulfill</code>方法中会进行判断，如果新节点是<code>head</code>节点的下一个节点，考虑到可能很快它就会完成匹配后出队，先不将它挂起，进行一定次数的自旋，超过自旋次数的上限后再进行挂起。如果不是<code>head</code>节点的下一个节点，避免自旋造成的资源浪费，则直接调用<code>park</code>或<code>parkNanos</code>挂起线程。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/37b8caa3cbcf41d5b2df8b93fb382a8d~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>3</strong>、当挂起的线程被中断或到达超时时间，那么需要将节点从队列中进行移除，这时会执行<code>clean()</code>方法。如果要被删除的节点不是链表中的尾节点，那么比较简单，直接使用<code>CAS</code>替换前一个节点的<code>next</code>指针。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/022831caa74846b083c944f0d9bb8913~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果要删除的节点是链表中的尾节点，就会有点复杂了，因为多线程环境下可能正好有其他线程正在向尾节点后添加新的节点，这时如果直接删除尾节点的话，会造成后面节点的丢失。</p><p>这时候就会用到<code>TransferQueue</code>中定义的<code>cleanMe</code>标记节点了，<code>cleanMe</code>的作用就是当要被移除的节点是队尾节点时，用它来标记队尾节点的前驱节点。具体在执行过程中，又会分为两种情况：</p><ul><li><code>cleanMe</code>节点为<code>null</code>，说明队列在之前没有标记需要删除的节点。这时会使用<code>cleanMe</code>来标识该节点的前驱节点，标记完成后退出<code>clean</code>方法，当下一次执行<code>clean</code>方法时才会删除<code>cleanMe</code>的下一个节点。</li></ul><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a653b02b4059404683ff694200b74273~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>cleanMe</code>节点不为<code>null</code>，那么说明之前已经标记过需要删除的节点。这时删除<code>cleanMe</code>的下一个节点，并清除当前<code>cleanMe</code>标记，并再将当前节点<strong>未修改前的</strong>前驱节点标记为<code>cleanMe</code>。注意，当前要被删除的节点的前驱节点不会发生改变，即使这个前驱节点已经在逻辑上从队列中删除掉了。</li></ul><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e02d8ffdfb24445d9cd33d869f4a19e1~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>执行完成<code>clean</code>方法后，<code>transfer</code>方法会直接返回<code>null</code>，说明入队操作失败。</p><p>面试官：讲了这么多，入队的还都是一个类型的节点吧？</p><p>Hydra：是的，<code>TransferQueue</code>队列中，只会存在一个类型的节点，如果有另一个类型的节点过来，那么就会执行出队的操作了。</p><p>面试官：好吧，那你接着再说说出队方法吧。</p><p>Hydra：相对入队来说，出队的逻辑就比较简单了。因为现在使用的是公平模式，所以当队列不为空，且队列的<code>head</code>节点的下一个节点与当前节点匹配成功时，进行出队操作，唤醒<code>head</code>节点的下一个节点，进行数据的传递。</p><p>根据队列中节点类型的不同，可以分为两种情况进行分析：</p><p>1、如果<code>head</code>节点的下一个节点是<code>put</code>类型，当前新节点是<code>take</code>类型。<code>take</code>线程取出<code>put</code>节点的<code>item</code>的值，并将其<code>item</code>变为<code>null</code>，然后推进头节点，唤醒被挂起的<code>put</code>线程，<code>take</code>线程返回<code>item</code>的值，完成数据的传递过程。</p><p><code>head</code>节点的下一个节点被唤醒后，会推进<code>head</code>节点，虽然前面说过队列的<code>head</code>节点是一个<code>dummy</code>节点，并不存储数据，理论上应该将第二个节点直接移出队列，但是源码中还是将<code>head</code>节点出队，将原来的第二个节点变成了新的<code>head</code>节点。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7756b735a2a943118a58a89c5ac9c448~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>2、同理，如果<code>head</code>节点的下一个节点是<code>take</code>类型，当前新节点是<code>put</code>类型。<code>put</code>线程会将<code>take</code>节点的<code>item</code>设为自己的数据值，然后推进头节点，并唤醒挂起的<code>take</code>线程，唤醒的<code>take</code>线程最终返回从<code>put</code>线程获得的<code>item</code>的值。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00e340fce2e9407685d4639185202edc~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此外，在<code>take</code>线程唤醒后，会将自己<code>QNode</code>的<code>item</code>指针指向自己，并将<code>waiter</code>中保存的线程置为<code>null</code>，方便之后被<code>gc</code>回收。</p><p>面试官：也就是说，在代码中不一定非要生产者先去生产产品，也可以由消费者先到达后进行阻塞等待？</p><p>Hydra：是的，两种线程都可以先进入队列。</p><p>面试官：好了，公平模式下我是明白了，我去喝口水，给你十分钟时间，回来我们聊聊非公平模式的实现吧。</p><p>Hydra：……</p>`,57);function c(l,u){return a(),s("div",null,[e(" more "),t])}const d=n(o,[["render",c],["__file","SynchronousQueueFair.html.vue"]]);export{d as default};
