import{_ as n,W as a,X as s,$ as t,Z as e}from"./framework-9e67db09.js";const p={},o=e(`<p>在创建传统SpringMVC项目时，需要复杂的配置文件，例如：</p><ul><li><code>web.xml</code>，加载配置spring容器，配置拦截</li><li><code>application.xml</code>，配置扫描包，扫描业务类</li><li><code>springmvc.xml</code>，扫描controller，视图解析器等</li><li>……</li></ul><p>而Spring Boot为我们提供了一种极简的项目搭建方式，看一下Spring Boot项目的启动类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单的一行代码，即可启动一个Spring Boot程序，那么在实际运行中是如何做到零配置启动的呢？下面从源码角度进行分析。</p><h2 id="springbootapplication" tabindex="-1"><a class="header-anchor" href="#springbootapplication" aria-hidden="true">#</a> @SpringBootApplication</h2><p>首先看一下<code>@SpringBootApplication</code>这个组合注解，除去元注解外，它还引入了其他三个重要的注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token annotation punctuation">@ComponentScan</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="springbootconfiguration" tabindex="-1"><a class="header-anchor" href="#springbootconfiguration" aria-hidden="true">#</a> @SpringBootConfiguration</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从源码可以看到，其实<code>@SpringBootConfiguration</code>并没有额外功能，它只是Spring中<code>@Configuration</code>的派生注解，用于标注配置类，完成Bean的配置与管理。</p><h3 id="componentscan" tabindex="-1"><a class="header-anchor" href="#componentscan" aria-hidden="true">#</a> @ComponentScan</h3><p>Spring中的注解，用于包的扫描，并把声明了特定注解的类交给spring的ioc容器。</p><h3 id="enableautoconfiguration" tabindex="-1"><a class="header-anchor" href="#enableautoconfiguration" aria-hidden="true">#</a> @EnableAutoConfiguration</h3><p>Spring Boot有中一个非常重要的理念就是约定大于配置。而自动配置这一机制的核心实现就是靠<code>@EnableAutoConfiguration</code>注解完成的。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c3b15e97d74409bb580801e3bad99c0~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>可以看出，在<code>@EnableAutoConfiguration</code>注解中，使用<code>@Import</code>导入了<code>AutoConfigurationImportSelector</code>这个类，实现了<code>ImportSelector</code>接口的<code>selectImports()</code>方法。spring中会把<code>selectImports()</code>方法返回的String数组中的类的全限定名实例化为bean，并交给spring容器管理。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64c07d2207024fe194fd4a3b11d8b9af~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>查看其中的<code>getAutoConfigurationEntry</code>方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f39e482fcecb4233aad60104ab120ed2~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在执行完<code>getCandidateConfigurations</code>后，把众多类的全限定名存储到了一个List中。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4f2351e5d334c90b2e28ad15b075959~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><code>SpringFactoriesLoader</code>这个类非常重要，属于Spring框架的一种扩展方案，提供一种了配置查找的功能支持。其主要功能就是读取配置文件<code>META-INF/spring.factories</code>，决定要加载哪些类。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b53410db2eb4b129e8dbe276719d036~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>当然，并不是所有<code>spring.factories</code>中的类都会被加载到spring容器中，很多情况下需要按照需求所需的情况引入，依赖条件注解<code>@Conditional</code>进行判断。例如<code>ServletWebServerFactoryAutoConfiguration</code>类</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e60536d30f0c4e85885b6243b7c514b7~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>只有在<code>classpath</code>下存在<code>ServletRequest</code>这一类时，才将<code>ServletWebServerFactoryAutoConfiguration</code>作为配置类导入spring容器中。</p><h2 id="springapplication" tabindex="-1"><a class="header-anchor" href="#springapplication" aria-hidden="true">#</a> SpringApplication</h2><p><code>SpringApplication</code>提供了一个简单的方式以启动Spring boot程序，查看<code>SpringApplication.run</code>方法调用。在此创建了一个<code>SpringApplication</code>的实例，并调用了它的run方法：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f10e2de612d4a43b7406d72fa3724fa~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>看一下创建实例的过程源码：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4fbd6ff717c64c9fb9a59828786132eb~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>主要完成了这几件事情：</p><ul><li>设置资源加载器，用于将资源加载到加载器中</li><li>判断当前项目类型是什么？ 提供了<code>NONE</code>，<code>SERVLET</code>，<code>REACTIVE</code> 三种类型备选</li><li>使用<code>SpringFactoriesLoader</code>查找并加载所有可用的<code>ApplicationContextInitializer</code></li><li>使用<code>SpringFactoriesLoader</code>查找并加载所有可用的监听器<code>ApplicationListener</code></li><li>推断并设置<code>main</code>方法的定义</li></ul><p><code>SpringApplication</code>完成初始化后，调用<code>run</code>方法，下面对<code>run</code>方法中核心代码进行分析：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a61b3f6a69e42ed942f82ee2c01c192~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>按照图中标注序号进行分析：</p><p>1、spring监听器的使用，要获取这些监听器的对象，就要知道其全路径。通过<code>SpringFactoriesLoader</code>查找<code>spring.factories</code>获得，之后再调用它们的<code>started()</code>方法</p><p>2、 创建并配置当前Spring Boot应用将要使用的Environment，根据监听器和默认应用参数来准备所需要的环境</p><p>3、打印Banner</p><p>4、创建spring应用上下文。根据之前推断的项目类型，决定该为当前SpringBoot应用创建什么类型的<code>ApplicationContext</code>并创建完成</p><p>5、准备应用上下文，首先将之前准备好的Environment设置给创建好的<code>ApplicationContext</code>使用。然后遍历调用所有<code>ApplicationContextInitializer</code>的<code>initialize</code>方法来对已经创建好的<code>ApplicationContext</code>进行进一步的处理。最后，遍历调用所有<code>SpringApplicationRunListener</code>的<code>contextPrepared()</code>方法</p><p>6、这里最终调用了<code>Spring中AbstractApplicationContext</code>的<code>refresh</code>方法，可以说这个<code>refresh</code>方法是Spring中最重要的方法之一，完成了Bean工厂创建，后置管理器注册，Bean实例化等最重要的工作。这一步工作完成后，spring的ioc容器就完成了</p><p>7、如果有Bean实现了<code>CommandLineRunner</code>接口并重写了<code>run</code>方法，则遍历执行<code>CommandLineRunner</code>中的方法</p><h2 id="手写-starter" tabindex="-1"><a class="header-anchor" href="#手写-starter" aria-hidden="true">#</a> 手写 Starter</h2><p>Starter是Spring boot的核心思想之一，在使用spring boot来搭建项目时，往往只需要引入官方提供的starter，就可以直接使用，而不用再进行复杂的配置工作。</p><p>一方面，是前面说过的通过动态spi扩展可以直接从starter的<code>META-INF/spring.factories</code>中决定什么类将被实例化为bean交给spring容器管理。另一方面，starter的父pom中往往已经包含了需要导入的依赖，以<code>mybatis-spring-boot-starter</code>这一starter为例，点开后可以看见它已经将依赖的坐标全部为我们导入了。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2be848e401664232b10b615c8493439e~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>总的来说，使用starter可以完成以下功能：</p><ul><li>启用功能，注意不是实现功能</li><li>依赖管理，starter帮我们引入需要的所有依赖</li></ul><p>讲完了关于starter的原理，下面讲讲如何构造一个自己的starter。官方为我们提供了一个命名规范，建议第三方starter命名应当遵循<code>thirdpart-spring-boot-starter</code>这一格式，那我们就来手写一个<code>my-spring-boot-starter</code>，通过这个过程来学习如何完成属性的配置。</p><p>1、创建一个maven的普通project，在pom中添加parent节点</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、引入自动装配的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、实现自己的功能需求</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SayhiImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ISayhi</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">MyProperties</span> properties<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot; hello spring boot&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望能够在其他项目中使用的时候，通过yml或property文件对这个属性进行赋值，就要写一个对属性进行赋值操作的类，并使用<code>@ConfigurationProperties</code>注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;spring.sayhi&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、如果希望上面开发的功能在springboot启动的时候就加入项目进行管理，就需要有一个代表当前starer自动装配的类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConditionalOnClass</span>
<span class="token comment">//使配置文件生效</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">MyProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAutoConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token comment">//条件注解，仅当ioc容器中不存在指定类型的bean时，才会创建bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">ISayhi</span> <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SayhiImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、在<code>resources</code>创建<code>META-INF</code>，创建<code>spring.factories</code>文件，在里面写入：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.test.MyAutoConfiguration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6、使用maven打包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn clean <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="测试工程" tabindex="-1"><a class="header-anchor" href="#测试工程" aria-hidden="true">#</a> 测试工程</h3><p>1、新建一个测试工程，在pom文件中引入上面打包的坐标</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、使用yml进行属性的配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">sayhi</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> hydra
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、运行测试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestApplication</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ISayhi</span> sayhi<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span> application<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">TestApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        application<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        sayhi<span class="token punctuation">.</span><span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hydra hello spring boot
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果在之前为name设置了默认值，那么在不在yml中对name进行配置的话就会打印默认值。这也就是为什么springboot在启动tomcat时会自动为我们设置为8080端口的原因，从这再一次体现了“约定大于配置”这一理念。</p>`,75);function i(c,l){return a(),s("div",null,[t(" more "),o])}const d=n(p,[["render",i],["__file","zeroConfig.html.vue"]]);export{d as default};
