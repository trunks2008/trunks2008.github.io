import{_ as n,W as s,X as a,$ as t,Z as e}from"./framework-9e67db09.js";const p={},o=e(`<p>在基于Mybatis-plus实现多租户架构中，介绍了在多租户项目中如果要开启一个子线程，那么需要手动进行<code>RequestAttributes</code>的子线程共享。如果应用场景较少的话可能也不是特复杂，但是如果场景数量上来了，还是很容易忘记的，在测试的时候才会发现疏忽了这一块。所以想了半天，决定抽取一个公共方法，用来执行这些特定的子线程。</p><p>既然要复用这类线程的执行方式，线程池是个不错的选择。这里省略创建线程池的步骤，选择直接使用spring内已经初始化好的线程池<code>ThreadPoolTaskExecutor</code>。下面写一个工具类，通过线程池启动子线程，实现下面几个内容：</p><ul><li>使用线程池启动子线程前获取当前的<code>RequestAttributes</code></li><li>在子线程中开启<code>RequestAttributes</code>的继承</li><li>测试在子线程中能否拿到<code>Request</code>中的租户信息</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncExecutorUtil</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">ThreadPoolTaskExecutor</span> threadPoolTaskExecutor<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doMethodWithRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServletRequestAttributes</span> sra <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> 
              <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">setRequestAttributes</span><span class="token punctuation">(</span>sra<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sra<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;tenantId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用postman进行测试，发现这样做确实可以实现<code>Request</code>的传递，那么下一个问题就来了，我怎么把要执行的方法逻辑传递给这个线程呢？可能每次要实际执行的逻辑都不一样，所以这里使用函数式接口来传递具体方法的实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FunctionInterface</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">doMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改线程池的执行方法，首先保存当前<code>RequestAttributes</code>，在启动的子线程中实现对<code>Request</code>的继承，最后执行函数式接口的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doMethodWithRequest</span><span class="token punctuation">(</span><span class="token class-name">FunctionInterface</span>  functionInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ServletRequestAttributes</span> sra <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> 
                    <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">setRequestAttributes</span><span class="token punctuation">(</span>sra<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sra<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;tenantId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        functionInterface<span class="token punctuation">.</span><span class="token function">doMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在web请求中，在函数式接口中实现实际执行的逻辑，这里为了使结构更清楚一些没有使用lambda表达式，如果使用lambda表达式可以使这一段代码更加简洁。之后使用上面定义的异步线程工具类在子线程中执行数据库的查询：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">AsyncExecutorUtil</span> executorUtil<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        executorUtil<span class="token punctuation">.</span><span class="token function">doMethodWithRequest</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FunctionInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>userList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看执行结果，可以正常执行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span><span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span>trunks<span class="token punctuation">,</span> phone<span class="token operator">=</span><span class="token number">13788886666</span><span class="token punctuation">,</span> address<span class="token operator">=</span>beijing<span class="token punctuation">,</span> tenantId<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>到这为止，不知道大家是不是记得之前提过的一个场景，有些时候第三方的系统在调用我们的接口时可能无法携带租户信息，之后的所有数据库查询都需要我们使用重新手写sql，并添加<code>SqlParse</code>的过滤。</p><p>举个例子，我们系统中创建订单，调用微信支付，在前端支付成功后微信会回调我们的接口。这个时候微信是肯定不会携带租户的信息的，按照之前的做法，我们就需要先根据回调信息的订单号先使用过滤过的sql语句查出这笔订单的信息，拿到订单中包含的租户id，在之后所有被过滤掉的手写sql中手动拼接这个租户id。</p><p>但是有了上面的结果 ，对我们执行这类的请求可以产生一些改变 。之前我们是向子线程传递真实的原始Request，但是当前的<code>Request</code>请求不满足我们的需求，没有包含租户信息，那么重新构建一个符合我们需求的<code>Request</code>，并传递给子线程，那么是不是就不用去进行sql的过滤和重写了呢？</p><p>按照上面的步骤，先进行第一步，手写一个过滤租户的sql：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@SqlParser</span><span class="token punctuation">(</span>filter <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from \`order\` where order_number= #{orderNumber}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Order</span> <span class="token function">selectWithoutTenant</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据这个请求，能够查询出订单的全部信息，这里面就包含了租户的id：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Order(id=3, orderNumber=6be2e3e10493454781a8c334275f126a, money=100.0, tenantId=3)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来重头戏来了，既然拿到了租户id，我们就来重新伪造一个<code>Request</code>，让这个新的<code>Request</code>中携带租户id，并使用这个<code>Request</code>执行后续的逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FakeTenantRequest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tenantId<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ServletRequestAttributes</span> <span class="token function">getFakeRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;tenantId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> tenantId<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

           <span class="token comment">//...这里省略了其他需要重写的方法，不重要，可不用重写</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">ServletRequestAttributes</span> servletRequestAttributes<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> servletRequestAttributes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造一个<code>HttpServletRequest</code>的过程比较复杂，里面需要重写的方法非常多，好在我们暂时都用不上所以不用重写，只重写对我们比较重要的<code>getHeader</code>方法即可。我们在构造方法中传进来租户id，并把这个租户id放在<code>Request</code>的请求头的<code>tenantId</code>字段，最终返回<code>RequestAttributes</code>。</p><p>在线程池工具类中添加一个方法，在子线程中使用我们伪造的<code>RequestAttributes</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doMethodWithFakeRequest</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span> fakeRequest<span class="token punctuation">,</span> 
        <span class="token class-name">FunctionInterface</span> functionInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">setRequestAttributes</span><span class="token punctuation">(</span>fakeRequest<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        functionInterface<span class="token punctuation">.</span><span class="token function">doMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模拟回调请求，这时候在请求的<code>Header</code>中不需要携带任何租户信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;callback&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callBack</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderNumber<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Order</span> order <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectWithoutTenant</span><span class="token punctuation">(</span>orderNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FakeTenantRequest</span> fakeTenantRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FakeTenantRequest</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    executorUtil<span class="token punctuation">.</span><span class="token function">doMethodWithFakeRequest</span><span class="token punctuation">(</span>fakeTenantRequest<span class="token punctuation">.</span><span class="token function">getFakeRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">FunctionInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>userList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看执行结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token operator">-</span> <span class="token operator">==</span><span class="token operator">&gt;</span>  <span class="token class-name">Preparing</span><span class="token operator">:</span> select <span class="token operator">*</span> from \`order\` where order_number<span class="token operator">=</span> <span class="token operator">?</span> 
 <span class="token operator">-</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">6be2e3e10493454781a8c334275f126a</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>
 <span class="token operator">-</span> <span class="token operator">&lt;=</span><span class="token operator">=</span>      <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">1</span>
 <span class="token operator">-</span> <span class="token class-name">Order</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> orderNumber<span class="token operator">=</span><span class="token number">6</span>be2e3e10493454781a8c334275f126a<span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">100.0</span><span class="token punctuation">,</span> tenantId<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
 <span class="token operator">-</span> <span class="token operator">==</span><span class="token operator">&gt;</span>  <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token class-name">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> address<span class="token punctuation">,</span> tenant_id <span class="token constant">FROM</span> user <span class="token constant">WHERE</span> <span class="token punctuation">(</span>id <span class="token constant">IS</span> <span class="token class-name">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token class-name">AND</span> tenant_id <span class="token operator">=</span> <span class="token char">&#39;3&#39;</span> 
 <span class="token operator">-</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> 
 <span class="token operator">-</span> <span class="token operator">&lt;=</span><span class="token operator">=</span>      <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">1</span>
 <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span>hydra<span class="token punctuation">,</span> phone<span class="token operator">=</span><span class="token number">13699990000</span><span class="token punctuation">,</span> address<span class="token operator">=</span>qingdao<span class="token punctuation">,</span> tenantId<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在子线程中执行的sql会经过mybatis-plus的租户过滤器，在sql中添加租户id条件。这样，就实现了通过伪造<code>Request</code>的方式极大程度的简化了改造sql的过程。</p>`,29);function c(l,u){return s(),a("div",null,[t(" more "),o])}const r=n(p,[["render",c],["__file","multiTenancyAdvanced.html.vue"]]);export{r as default};
