const e=JSON.parse('{"key":"v-6b9e53a6","path":"/concurrent/singleton.html","title":"并发编程基础盘点 - 单例模式","lang":"zh-CN","frontmatter":{"title":"并发编程基础盘点 - 单例模式","icon":"page","order":3,"author":"Hydra","date":"2020-05-02T00:00:00.000Z","tag":["单例模式","并发"],"star":true,"description":"单例模式是一种常见的设计模式，在这个模式下，单例对象的类必须保证只有一个实例存在，并提供返回实例对象的方法。在日常工作中，线程池、缓存、日志等对象通常被设计成单例模式，一方面减少了频繁创建销毁对象用以提升性能，另一方面避免了对共享资源的多重占用并简化了访问。 那么在高并发、多线程的环境下，是如何确保多个线程操作的是同一对象，也就是说保证对象的唯一性呢？...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/concurrent/singleton.html"}],["meta",{"property":"og:site_name","content":"码农参上"}],["meta",{"property":"og:title","content":"并发编程基础盘点 - 单例模式"}],["meta",{"property":"og:description","content":"单例模式是一种常见的设计模式，在这个模式下，单例对象的类必须保证只有一个实例存在，并提供返回实例对象的方法。在日常工作中，线程池、缓存、日志等对象通常被设计成单例模式，一方面减少了频繁创建销毁对象用以提升性能，另一方面避免了对共享资源的多重占用并简化了访问。 那么在高并发、多线程的环境下，是如何确保多个线程操作的是同一对象，也就是说保证对象的唯一性呢？..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-03T05:56:54.000Z"}],["meta",{"property":"article:author","content":"Hydra"}],["meta",{"property":"article:tag","content":"单例模式"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:published_time","content":"2020-05-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-03T05:56:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发编程基础盘点 - 单例模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-03T05:56:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hydra\\"}]}"]]},"headers":[{"level":2,"title":"1.饿汉模式","slug":"_1-饿汉模式","link":"#_1-饿汉模式","children":[]},{"level":2,"title":"2.懒汉模式","slug":"_2-懒汉模式","link":"#_2-懒汉模式","children":[]},{"level":2,"title":"3.DCL模式","slug":"_3-dcl模式","link":"#_3-dcl模式","children":[]},{"level":2,"title":"4.Holder模式","slug":"_4-holder模式","link":"#_4-holder模式","children":[]},{"level":2,"title":"5.枚举方式","slug":"_5-枚举方式","link":"#_5-枚举方式","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1680501414000,"updatedTime":1680501414000,"contributors":[{"name":"trunks2008","email":"jialegeyou1111@163.com","commits":1}]},"readingTime":{"minutes":5.89,"words":1768},"filePathRelative":"concurrent/singleton.md","localizedDate":"2020年5月2日","autoDesc":true}');export{e as data};
