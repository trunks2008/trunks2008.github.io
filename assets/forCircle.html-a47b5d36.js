import{_ as n,W as a,X as s,$ as e,Z as p}from"./framework-9e67db09.js";const o={},t=p(`<p>前几天，一个小伙伴告诉我，他在面试的时候被面试官问了这么一个问题：</p><blockquote><p>在for循环中，到底应该用 i++ 还是 ++i ？</p></blockquote><p>听到这，我感觉这面试官确实有点不按套路出牌了，放着好好的八股文不问，净整些幺蛾子的东西。在临走的时候，小伙伴问面试官这道题的答案是什么，面试官没有明确告诉答案，只是说让从程序执行的效率角度自己思考一下。</p><p>好吧，既然这个问题被抛了出来，那我们就见招拆招，也给以后面试的小伙伴们排一下坑。</p><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><p>前面提到，这个搞事情的面试官说要从<strong>执行效率</strong>的角度思考，那我们就抛开语义上的区别，从运行结果以外的效率来找找线索。回想一下，我们在以前介绍CAS的文章中提到过，后置自增<code>i++</code>和前置自增<code>++i</code>都不是原子操作，那么实际在执行过程中是什么样的呢？下面，我们从字节码指令的角度，从底层进行一波分析。</p><h3 id="i-执行过程" tabindex="-1"><a class="header-anchor" href="#i-执行过程" aria-hidden="true">#</a> i++ 执行过程</h3><p>先写一段简单的代码，核心功能就只有赋值和自增操作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面用<code>javap</code>对字节码文件进行反编译，看一下实际执行的字节码指令：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be5722cccab24ff89764e7f692148717~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>是不是有点难懂？没关系，接下来我们用图解的形式来直观地看看具体执行的过程，也帮大家解释一下晦涩的字节码指令是如何操作栈帧中的数据结构的，为了简洁起见，在图中只列出栈帧中比较重要的<strong>操作数栈</strong>和<strong>局部变量表</strong>。</p><p>上面的代码中除去打印语句，整体可以拆分成两步，我们先看第一步 <code>int i=3</code> 是如何执行的 。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f5f6026142745869efb3bee105aaaa8~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面两条操作数栈和局部变量表相关的字节码指令还是比较容易理解的，下面再看一下第二步<code>int j=i++</code>的执行过程：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e64b9110c434f2ca9993d3d912ba591~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在上图中需要注意的是，<code>iinc</code>能够直接更新局部变量表中的变量值，它不需要把数值压到操作数栈中就能够直接进行操作。在上面的过程中，抛去赋值等其他操作，<code>i++</code>实际执行的字节码指令是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">2</span><span class="token operator">:</span> iload_1
<span class="token number">3</span><span class="token operator">:</span> iinc    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果把它翻译成我们能看懂的java代码，可以理解为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> temp<span class="token operator">=</span>i<span class="token punctuation">;</span>
i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说在这个过程中，除了必须的自增操作以外，又引入了一个新的局部变量，接下来我们再看看<code>++i</code>的执行过程。</p><h3 id="i-执行过程-1" tabindex="-1"><a class="header-anchor" href="#i-执行过程-1" aria-hidden="true">#</a> ++i 执行过程</h3><p>我们对上面的代码做一点小小的改动，仅把<code>i++</code>换成<code>++i</code>，再来分析一下<code>++i</code>的执行过程是怎样的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token operator">++</span>i<span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，用<code>javap</code>反编译字节码文件：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22e635799eaa4a1dac1e9c2fbd5e08bf~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>int i=3</code>对应前两行字节码指令，执行过程和前面<code>i++</code>例子中完全相同，可以忽略不计，重点还是通过图解的方式看一下<code>int j=++i</code>对应的字节码指令的执行过程：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7a20dc616e9491e956d9ee17c22a644~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>抛去赋值操作，<code>++i</code>实际执行过程只有一行字节码指令：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">2</span><span class="token operator">:</span> iinc    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>转换成能理解的java代码的话，<code>++i</code>实际执行的就在局部变量中执行的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这么看来，在使用<code>++i</code>时确实比<code>i++</code>少了一步操作，少引入了一个局部变量，如果在运算结果相同的场景下，使用<code>++i</code>的话的确效率会比<code>i++</code>高那么一点点。</p><p>那么回到开头的问题，两种自增方式应用在for循环中执行的时候，那种效率更高呢？刚才得出的结论仍然适用于for循环中吗，别急，让我们接着往下看。</p><h3 id="for循环中的自增" tabindex="-1"><a class="header-anchor" href="#for循环中的自增" aria-hidden="true">#</a> for循环中的自增</h3><p>下面准备两段包含了for循环的代码，分别使用<code>i++</code>后置自增和<code>++i</code>前置自增：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//i++ 后置自增</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForIpp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//++i 前置自增</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForPpi</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>老规矩，还是直接反编译后的字节码文件，然后对比一下指令的执行过程：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a7390ae600b4d93911d5390273cebfa~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>到这里，有趣的现象出现了，两段程序执行的字节码指令部分居然<strong>一模一样</strong>。先不考虑为什么会有这种现象，我们还是通过图解来看一下字节码指令的执行过程：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a207e17f662488eafb23f503b0010d2~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以清晰的看到，在进行自增时，都是直接执行的<code>iinc</code>，在之前并没有执行<code>iload</code>的过程，也就是说，两段代码执行的都是<code>++i</code>。这一过程的验证其实还有更简单的方法，直接使用idea打开字节码文件，就可以看到最终for循环中使用的相同的<strong>前置自增</strong>方式。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3193b56a8644859b1d3054593c42179~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那么，为什么会出现这种现象呢？归根结底，还是java编译器对于代码的优化，在两种自增方式中，如果没有赋值操作，那么都会被优化成一种方式，就像下面的两个方法的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">ipp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">ppi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token operator">++</span>i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终执行时的字节码指令都是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">0</span><span class="token operator">:</span> iconst_3
<span class="token number">1</span><span class="token operator">:</span> istore_1
<span class="token number">2</span><span class="token operator">:</span> iinc    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token number">5</span><span class="token operator">:</span> <span class="token keyword">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，在上面的这种特定情况下，代码经过编译器的优化，保持了语义不变，并通过转换语法的形式提高了代码的运行效率。所以再回到我们开头的问题，就可以得出结论，在for循环中，通过jvm进行编译优化后，不论是<code>i++</code>还是<code>++i</code>，最终执行的方式都是<code>++i</code>，因此执行效率是相同的。</p><p>所以，以后再碰到这种半吊子的面试官，和你谈for循环中<code>i++</code>和<code>++i</code>的效率问题，自信点，直接把答案甩在他的脸上，<strong>两种方式效率一样！</strong></p><blockquote><p>本文代码基于Java 1.8.0_261-b12 版本测试</p></blockquote>`,50);function c(i,l){return a(),s("div",null,[e(" more "),t])}const d=n(o,[["render",c],["__file","forCircle.html.vue"]]);export{d as default};
